from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import csv
import os
from datetime import datetime
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font, PatternFill, Alignment

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===

# –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
category_data_collector = {}

def clear_category_collector():
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    global category_data_collector
    category_data_collector = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
parsing_state = {
    "current_category": 0,
    "current_subcategory": 0,
    "total_categories": 0,
    "processed_items": 0,
    "last_successful_url": "",
    "start_time": None
}

def restart_browser():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é"""
    global driver
    try:
        if 'driver' in globals() and driver:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            driver.quit()
            time.sleep(2)
        
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--memory-pressure-off")
        
        driver = webdriver.Chrome(options=chrome_options)
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return False

def safe_get_page(url, retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    global driver
    
    for attempt in range(retries):
        try:
            print(f"   üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            driver.get(url)
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if "Error" not in driver.title and len(driver.page_source) > 1000:
                parsing_state["last_successful_url"] = url
                return True
            else:
                print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
            if attempt < retries - 1:
                print(f"   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                if not restart_browser():
                    continue
                time.sleep(3)
            
    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def safe_parse_with_retry(parse_function, context=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    retries = 2
    
    for attempt in range(retries):
        try:
            result = parse_function()
            if result:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                return result
            else:
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {context} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {context} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
            if attempt < retries - 1:
                print(f"   üîÑ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(5)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                try:
                    driver.refresh()
                    time.sleep(3)
                except:
                    restart_browser()
                    if parsing_state["last_successful_url"]:
                        safe_get_page(parsing_state["last_successful_url"])
    
    print(f"   ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ {context} –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return []

def add_to_category_collector(category_name, subcategory_path, product_data, block_info=None, is_structured_block=False):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    Args:
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_path: –ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
        product_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞/—Ç–æ–≤–∞—Ä–æ–≤
        block_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
        is_structured_block: True –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    global category_data_collector
    
    if category_name not in category_data_collector:
        category_data_collector[category_name] = {
            "structured_data": [],  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –±–ª–æ–∫–∏ + —Ç–∞–±–ª–∏—Ü—ã
            "statistics": {
                "total_products": 0,
                "total_blocks": 0
            }
        }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫—É
    if isinstance(subcategory_path, list):
        subcategory_key = " ‚Üí ".join(subcategory_path)
    else:
        subcategory_key = str(subcategory_path)
    
    timestamp = datetime.now().isoformat()
    
    if is_structured_block and block_info:
        # –≠—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–æ–≤
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–æ–∫–µ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        block_row = {
            "–¢–∏–ø –∑–∞–ø–∏—Å–∏": "–ë–õ–û–ö_–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï",
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
            "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": subcategory_key,
            "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞": block_info.get("block_title", ""),
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞": block_info.get("block_image", ""),
            "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞": timestamp
        }
        category_data_collector[category_name]["structured_data"].append(block_row)
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        if block_info.get("table_headers"):
            headers_row = {
                "–¢–∏–ø –∑–∞–ø–∏—Å–∏": "–ó–ê–ì–û–õ–û–í–ö–ò_–¢–ê–ë–õ–ò–¶–´",
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
                "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": subcategory_key,
                "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞": block_info.get("block_title", ""),
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            for i, header in enumerate(block_info["table_headers"]):
                headers_row[f"–ö–æ–ª–æ–Ω–∫–∞_{i+1}"] = header
            
            category_data_collector[category_name]["structured_data"].append(headers_row)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        if isinstance(product_data, list):
            for product in product_data:
                product_row = {
                    "–¢–∏–ø –∑–∞–ø–∏—Å–∏": "–¢–û–í–ê–†",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
                    "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": subcategory_key,
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞": block_info.get("block_title", ""),
                    "–ê—Ä—Ç–∏–∫—É–ª": product.get("article", ""),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": product.get("name", ""),
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": product.get("url", ""),
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                if block_info.get("table_headers"):
                    for i, header in enumerate(block_info["table_headers"]):
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        value = ""
                        possible_keys = [
                            header,
                            header.lower(),
                            header.replace(" ", "_"),
                            f"param_{i+1}",
                            f"param_{i}",
                            list(product.keys())[i+3] if i+3 < len(product.keys()) else None  # +3 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–µ 3 - name, article, url
                        ]
                        
                        for key in possible_keys:
                            if key and key in product:
                                value = str(product[key])
                                break
                        
                        product_row[f"–ö–æ–ª–æ–Ω–∫–∞_{i+1}"] = value
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
                for key, value in product.items():
                    if key not in ["name", "article", "url", "image_url"] and not key.startswith("_"):
                        if f"–î–æ–ø_{key}" not in product_row:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                            product_row[f"–î–æ–ø_{key}"] = str(value) if value is not None else ""
                
                category_data_collector[category_name]["structured_data"].append(product_row)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        category_data_collector[category_name]["statistics"]["total_blocks"] += 1
        category_data_collector[category_name]["statistics"]["total_products"] += len(product_data) if isinstance(product_data, list) else 0
        
    else:
        # –≠—Ç–æ –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (custom_list –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
        if isinstance(product_data, list):
            for product in product_data:
                product_row = {
                    "–¢–∏–ø –∑–∞–ø–∏—Å–∏": "–¢–û–í–ê–†_–û–¢–î–ï–õ–¨–ù–´–ô",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category_name,
                    "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": subcategory_key,
                    "–ê—Ä—Ç–∏–∫—É–ª": product.get("article", ""),
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": product.get("name", ""),
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä": product.get("url", ""),
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": product.get("image_url", ""),  # –î–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    "–¶–µ–Ω–∞": product.get("price", ""),
                    "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞": timestamp
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
                for key, value in product.items():
                    if key not in ["name", "article", "url", "image_url", "price"] and not key.startswith("_"):
                        product_row[f"–î–æ–ø_{key}"] = str(value) if value is not None else ""
                
                category_data_collector[category_name]["structured_data"].append(product_row)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        category_data_collector[category_name]["statistics"]["total_products"] += len(product_data) if isinstance(product_data, list) else 1

def save_category_based_excel():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ
    """
    global category_data_collector
    
    if not category_data_collector:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"parsed_data_structured_{timestamp}.xlsx"
        filepath = os.path.join("results", filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞: {filename}")
        print(f"   ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_data_collector)}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –∫–Ω–∏–≥—É
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
            summary_data = []
            total_products = 0
            
            for cat_name, cat_data in category_data_collector.items():
                stats = cat_data["statistics"]
                total_products += stats["total_products"]
                
                summary_data.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat_name,
                    "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_products"],
                    "–ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_blocks"]
                })
            
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name="üìä –°–≤–æ–¥–∫–∞", index=False)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç ({len(summary_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat_name, cat_data in category_data_collector.items():
                if not cat_data["structured_data"]:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                df = pd.DataFrame(cat_data["structured_data"])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 31 —Å–∏–º–≤–æ–ª–æ–º)
                sheet_name = cat_name[:27] + "..." if len(cat_name) > 27 else cat_name
                
                # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                invalid_chars = ['\\', '/', '*', '[', ']', ':', '?']
                for char in invalid_chars:
                    sheet_name = sheet_name.replace(char, '_')
                
                df.to_excel(writer, sheet_name=sheet_name, index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '{sheet_name}' ({len(df)} –∑–∞–ø–∏—Å–µ–π)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if "–¢–∏–ø –∑–∞–ø–∏—Å–∏" in df.columns:
                    type_counts = df["–¢–∏–ø –∑–∞–ø–∏—Å–∏"].value_counts().to_dict()
                    print(f"       –¢–∏–ø—ã –∑–∞–ø–∏—Å–µ–π: {type_counts}")
        
        print(f"üéâ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filepath) / 1024 / 1024:.2f} –ú–ë")
        print(f"üìä –ò—Ç–æ–≥–æ: {total_products} —Ç–æ–≤–∞—Ä–æ–≤")
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None

def get_category_name(category_element):
    try:
        name_span = category_element.find_element(By.CSS_SELECTOR, 'span.name')
        return driver.execute_script("return arguments[0].textContent;", name_span).strip()
    except:
        return "Unknown Category"

def get_subcategories(main_cat):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏""" 
    try:
        dropdown = main_cat.find_element(
            By.XPATH,
            "./following-sibling::ul[contains(@class, 'dropdown') and contains(@class, 'scrollblock')]"
        )
        links = dropdown.find_elements(By.CSS_SELECTOR, 'a.section.option-font-bold')
        
        subcategories = []
        for link in links:
            href = link.get_attribute("href")
            text = driver.execute_script("return arguments[0].textContent;", link).strip()
            subcategories.append({"name": text, "url": href})
        return subcategories
    except Exception as e:
        print(f"–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        return []

def get_products():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–∞—Ä—Å–∏—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–Ω—É–∫–∏).
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'name' –∏ 'url'
    """
    try:
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
        time.sleep(1.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        tabel_warper = driver.find_elements(By.CSS_SELECTOR, "div.sections_wrapper.block")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        display_list = driver.find_elements(By.CSS_SELECTOR, "div.display_list.custom_list.show_un_props")
        new_structure_items = driver.find_elements(By.CSS_SELECTOR, "div.list_item.item_info.catalog-adaptive.flexbox.flexbox--row")
        any_list_items = driver.find_elements(By.CSS_SELECTOR, ".list_item.item_info.catalog-adaptive, .list_item_wrapp")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_detail_indicators = [".product-detail-gallery__container", ".product-main", ".product-info", "h1[itemprop='name']"]
        is_single_product = any(driver.find_elements(By.CSS_SELECTOR, indicator) for indicator in product_detail_indicators)

        if tabel_warper:
            print("–ü–∞—Ä—Å–∏–º –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return parse_grandchildren()
        elif is_single_product:
            print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return parse_custom_list()
        elif display_list or new_structure_items or any_list_items:
            print(f"–ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(new_structure_items)}, —Å—Ç–∞—Ä–∞—è: {len(display_list)}, –æ–±—â–∞—è: {len(any_list_items)})")
            return parse_custom_list()
        else:
            print("–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤")
            return parse_structured_products()

    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def get_table_headers():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
    headers = []
    try:
        header_selectors = [
            "tr.table-view__item-wrapper--head th",
            "thead tr th",
            "tr:first-child th", 
            ".table-view__item-wrapper--head th",
            "div.razdel.table_all tr:first-child th",
            "table tr:first-child th"
        ]
        
        header_cells = []
        for selector in header_selectors:
            try:
                header_cells = driver.find_elements(By.CSS_SELECTOR, selector)
                if header_cells:
                    print(f" ‚Üí –ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break
            except:
                continue
        
        if not header_cells:
            header_cells = driver.find_elements(By.CSS_SELECTOR, "th")
        
        for cell in header_cells:
            header_text = driver.execute_script("return arguments[0].textContent;", cell).strip()
            if header_text:
                headers.append(header_text)
        
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: {len(headers)}")
        if headers:
            print(f" ‚Üí –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        headers = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–∞ –ß–ü–£", "–ú–∞–∫—Å. –¥–∏–∞–º–µ—Ç—Ä –Ω–∞–¥ —Å—Ç–∞–Ω–∏–Ω–æ–π", "–ú–∞–∫—Å. –¥–∏–∞–º–µ—Ç—Ä –Ω–∞–¥ —Å—É–ø–ø–æ—Ä—Ç–æ–º", "–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ç–æ—á–µ–Ω–∏—è", "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è —à–ø–∏–Ω–¥–µ–ª—è", "–¶–µ–Ω–∞", "–ù–∞–ª–∏—á–∏–µ"]
    
    return headers

def parse_structured_products():
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–∞–º, –∫–∞–∂–¥—ã–π —Å —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü–µ–π, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    try:
        full_list_link = driver.find_element(By.CSS_SELECTOR, "div.module-pagination a.link")
        href = full_list_link.get_attribute("href")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {href}")
        driver.get(href)
        time.sleep(1.5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
    except:
        print(" ‚Üí –°—Å—ã–ª–∫–∞ '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    product_blocks = []
    
    try:
        # –ò—â–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.razdel.table_all")
        
        if not main_blocks:
            main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.section_info_wrapper")
            
        if not main_blocks:
            main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.item_block_href")
            
        if not main_blocks:
            print(" ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            product_detail_indicators = [".product-detail-gallery__container", ".product-main", ".product-info", "div[class*='product-detail']", "h1[itemprop='name']"]
            
            is_single_product = False
            for indicator in product_detail_indicators:
                if driver.find_elements(By.CSS_SELECTOR, indicator):
                    is_single_product = True
                    print(f" ‚Üí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator})")
                    break
            
            if is_single_product:
                single_product_data = parse_single_product_page()
                if single_product_data:
                    print(f" ‚Üí –†–∞—Å–ø–∞—Ä—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä: {single_product_data[0].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    return {
                        "structured_blocks": [{
                            "block_title": "–û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä",
                            "block_image": single_product_data[0].get('image_url', ''),
                            "table_headers": [],
                            "products": single_product_data
                        }]
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            list_items = driver.find_elements(By.CSS_SELECTOR, "div.list_item.item_info.catalog-adaptive")
            if list_items:
                print(f" ‚Üí –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ({len(list_items)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_custom_list")
                return parse_custom_list()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
            table_elements = driver.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
            if table_elements:
                print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ ({len(table_elements)} —Å—Ç—Ä–æ–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_table_products")
                return parse_table_products()
            
            print(" ‚Üí –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {"products": [], "table_headers": []}
            
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(main_blocks)}")
        
        for i, block in enumerate(main_blocks):
            try:
                block_data = {
                    "block_index": i + 1,
                    "block_title": "",
                    "block_image": None,
                    "table_headers": [],
                    "products": []
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
                try:
                    title_found = False
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    try:
                        prev_element = driver.execute_script("return arguments[0].previousElementSibling;", block)
                        if prev_element:
                            title_selectors = ["h1", "h2", "h3", ".section_title", "span.font_md", ".title"]
                            for selector in title_selectors:
                                try:
                                    title_elem = prev_element.find_element(By.CSS_SELECTOR, selector)
                                    block_data["block_title"] = title_elem.text.strip()
                                    title_found = True
                                    break
                                except:
                                    continue
                    except:
                        pass
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –∏—â–µ–º –≤ —Å–∞–º–æ–º –±–ª–æ–∫–µ
                    if not title_found:
                        title_selectors = ["h1", "h2", "h3", "h4", "h5", ".section_title", "span.font_md", ".title", ".item_name"]
                        for selector in title_selectors:
                            try:
                                title_elem = block.find_element(By.CSS_SELECTOR, selector)
                                block_data["block_title"] = title_elem.text.strip()
                                title_found = True
                                break
                            except:
                                continue
                    
                    if not title_found:
                        block_data["block_title"] = f"–ë–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ {i + 1}"
                        
                except:
                    block_data["block_title"] = f"–ë–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ {i + 1}"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞
                try:
                    image_found = False
                    
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    try:
                        image_link = block.find_element(By.CSS_SELECTOR, "div.section_img a.fancy.popup_link")
                        image_url = image_link.get_attribute('href')
                        if image_url:
                            if not image_url.startswith('http'):
                                if image_url.startswith('//'):
                                    image_url = 'https:' + image_url
                                elif image_url.startswith('/'):
                                    image_url = 'https://cnc1.ru' + image_url
                            block_data["block_image"] = image_url
                            image_found = True
                            print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {image_url}")
                    except:
                        pass
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    if not image_found:
                        link_selectors = [".section_img a.fancy.popup_link", ".section_img a[href*='.jpg']", ".section_img a[href*='.png']", ".section_img a[href*='.gif']", "a.fancy.popup_link"]
                        for selector in link_selectors:
                            try:
                                image_link = block.find_element(By.CSS_SELECTOR, selector)
                                image_url = image_link.get_attribute('href')
                                if image_url:
                                    if not image_url.startswith('http'):
                                        if image_url.startswith('//'):
                                            image_url = 'https:' + image_url
                                        elif image_url.startswith('/'):
                                            image_url = 'https://cnc1.ru' + image_url
                                    block_data["block_image"] = image_url
                                    image_found = True
                                    print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {image_url}")
                                    break
                            except:
                                continue
                    
                    if not image_found:
                        print(f"   ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    print(f"   ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞: {e}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                try:
                    table_elem = block.find_element(By.CSS_SELECTOR, "table")
                    header_cells = table_elem.find_elements(By.CSS_SELECTOR, "th")
                    
                    for cell in header_cells:
                        header_text = driver.execute_script("return arguments[0].textContent;", cell).strip()
                        if header_text and header_text not in block_data["table_headers"]:
                            block_data["table_headers"].append(header_text)
                except:
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    block_data["table_headers"] = ["–ê—Ä—Ç–∏–∫—É–ª", "–°–∏—Å—Ç–µ–º–∞ –ß–ü–£", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "–¶–µ–Ω–∞"]
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
                try:
                    rows = block.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
                    
                    for row in rows:
                        try:
                            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                            image_url = None
                            try:
                                image_selectors = ["div.section_img img", ".section_img img", "img.preview_picture", ".preview_picture", "td img", "img"]
                                
                                image_elem = None
                                for selector in image_selectors:
                                    try:
                                        image_elem = row.find_element(By.CSS_SELECTOR, selector)
                                        if image_elem:
                                            break
                                    except:
                                        continue
                                
                                if image_elem:
                                    image_url = image_elem.get_attribute('src')
                                    if image_url and not image_url.startswith('http'):
                                        if image_url.startswith('//'):
                                            image_url = 'https:' + image_url
                                        elif image_url.startswith('/'):
                                            image_url = 'https://cnc1.ru' + image_url
                            except Exception as e:
                                print(f"   ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

                            # –ê—Ä—Ç–∏–∫—É–ª –∏ —Å—Å—ã–ª–∫–∞
                            article = "–ù–µ —É–∫–∞–∑–∞–Ω"
                            url = None
                            try:
                                # –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
                                article_link = row.find_element(By.CSS_SELECTOR, "a.dark_link.js-notice-block__title")
                                url = article_link.get_attribute('href')
                                
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
                                try:
                                    # –°–ø–æ—Å–æ–± 1: span –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–∫–∏
                                    article_span = article_link.find_element(By.TAG_NAME, "span")
                                    article = article_span.text.strip()
                                except:
                                    try:
                                        # –°–ø–æ—Å–æ–± 2: —Ç–µ–∫—Å—Ç –≤—Å–µ–π —Å—Å—ã–ª–∫–∏
                                        article = article_link.text.strip()
                                    except:
                                        # –°–ø–æ—Å–æ–± 3: –∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ —Å—Ç—Ä–æ–∫–∏
                                        try:
                                            first_cell = row.find_element(By.CSS_SELECTOR, "td:first-child")
                                            article = first_cell.text.strip()
                                        except:
                                            article = "–ù–µ —É–∫–∞–∑–∞–Ω"
                            except:
                                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                                try:
                                    # –ò—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç
                                    first_cell = row.find_element(By.CSS_SELECTOR, "td:first-child")
                                    cell_text = first_cell.text.strip()
                                    if cell_text:
                                        article = cell_text
                                    
                                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
                                    try:
                                        cell_link = first_cell.find_element(By.TAG_NAME, "a")
                                        url = cell_link.get_attribute('href')
                                    except:
                                        pass
                                except:
                                    pass

                            # –ù–∞–∑–≤–∞–Ω–∏–µ
                            name = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                            try:
                                # –°–ø–æ—Å–æ–± 1: span.font_md
                                name_elem = row.find_element(By.CSS_SELECTOR, "span.font_md")
                                name = name_elem.text.strip()
                            except:
                                try:
                                    # –°–ø–æ—Å–æ–± 2: –∏—â–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–µ
                                    second_cell = row.find_element(By.CSS_SELECTOR, "td:nth-child(2)")
                                    name = second_cell.text.strip()
                                except:
                                    try:
                                        # –°–ø–æ—Å–æ–± 3: –ª—é–±–æ–π span –≤ —Å—Ç—Ä–æ–∫–µ
                                        name_span = row.find_element(By.TAG_NAME, "span")
                                        name = name_span.text.strip()
                                    except:
                                        name = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞)
                            props = {}
                            props_cells = row.find_elements(By.CSS_SELECTOR, "td.table-view__item-wrapper-prop")
                            for j, cell in enumerate(props_cells):
                                cell_text = cell.text.strip()
                                if j < len(block_data["table_headers"]) - 2:
                                    header_name = block_data["table_headers"][j + 2] if j + 2 < len(block_data["table_headers"]) else f"param_{j+1}"
                                    props[header_name] = cell_text
                                else:
                                    props[f"param_{j+1}"] = cell_text

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                            product_data = {
                                "name": name,
                                "url": url,
                                "article": article,
                                "image_url": image_url,
                                **props
                            }
                            
                            block_data["products"].append(product_data)

                        except Exception as e:
                            print(f" ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä –≤ –±–ª–æ–∫–µ {i+1}: {e}")
                            continue
                            
                except:
                    print(f" ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –±–ª–æ–∫–µ {i+1}")
                
                if block_data["products"] or block_data["block_title"]:
                    product_blocks.append(block_data)
                    print(f" ‚Üí –ë–ª–æ–∫ {i+1}: '{block_data['block_title']}' - {len(block_data['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
                    if block_data.get("block_image"):
                        print(f"   ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {block_data['block_image']}")
                    else:
                        print(f"   ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if block_data.get("table_headers"):
                        headers_str = ", ".join(block_data["table_headers"][:5])
                        if len(block_data["table_headers"]) > 5:
                            headers_str += f" –∏ –µ—â—ë {len(block_data['table_headers']) - 5}"
                        print(f"   ‚îú‚îÄ‚îÄ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ({len(block_data['table_headers'])}): {headers_str}")
                    else:
                        print(f"   ‚îú‚îÄ‚îÄ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    if block_data["products"]:
                        print(f"   ‚îî‚îÄ‚îÄ –¢–æ–≤–∞—Ä—ã:")
                        for j, product in enumerate(block_data["products"][:3]):
                            article = product.get("article", "‚Äî")
                            name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                            print(f"       {j+1}. {name} (–∞—Ä—Ç: {article})")
                        if len(block_data["products"]) > 3:
                            print(f"       ... –∏ –µ—â—ë {len(block_data['products']) - 3} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        print(f"   ‚îî‚îÄ‚îÄ –¢–æ–≤–∞—Ä—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {i+1}: {e}")
                continue
    
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return parse_table_products()
    
    if not product_blocks:
        print(" ‚Üí –ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
        return parse_table_products()
    
    return {
        "structured_blocks": True,
        "blocks": product_blocks
    }

def parse_table_products():
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    products = []

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    try:
        full_list_link = driver.find_element(By.CSS_SELECTOR, "div.module-pagination a.link")
        href = full_list_link.get_attribute("href")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {href}")
        driver.get(href)
        time.sleep(1.5)
    except:
        print(" ‚Üí –°—Å—ã–ª–∫–∞ '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    table_headers = get_table_headers()

    # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
    try:
        rows = driver.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {len(rows)}")
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        rows = []

    for row in rows:
        try:
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            image_url = None
            try:
                image_selectors = ["div.section_img img", ".section_img img", "img.preview_picture", ".preview_picture", "td img", "img"]
                
                image_elem = None
                for selector in image_selectors:
                    try:
                        image_elem = row.find_element(By.CSS_SELECTOR, selector)
                        if image_elem:
                            break
                    except:
                        continue
                
                if image_elem:
                    image_url = image_elem.get_attribute('src')
                    if image_url and not image_url.startswith('http'):
                        if image_url.startswith('//'):
                            image_url = 'https:' + image_url
                        elif image_url.startswith('/'):
                            image_url = 'https://cnc1.ru' + image_url
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            # –ê—Ä—Ç–∏–∫—É–ª –∏ —Å—Å—ã–ª–∫–∞
            try:
                article_link = row.find_element(By.CSS_SELECTOR, "a.dark_link.js-notice-block__title")
                article = article_link.find_element(By.TAG_NAME, "span").text.strip()
                url = article_link.get_attribute('href')
            except:
                article = "–ù–µ —É–∫–∞–∑–∞–Ω"
                url = None

            # –ù–∞–∑–≤–∞–Ω–∏–µ
            try:
                name_elem = row.find_element(By.CSS_SELECTOR, "span.font_md")
                name = name_elem.text.strip()
            except:
                name = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã)
            props = {}
            props_cells = row.find_elements(By.CSS_SELECTOR, "td.table-view__item-wrapper-prop")
            for i, cell in enumerate(props_cells):
                cell_text = cell.text.strip()
                if i < len(table_headers) - 2:
                    header_name = table_headers[i + 2] if i + 2 < len(table_headers) else f"param_{i+1}"
                    props[header_name] = cell_text
                else:
                    props[f"param_{i+1}"] = cell_text

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            product_data = {
                "name": name,
                "url": url,
                "article": article,
                "image_url": image_url,
                **props
            }
            
            products.append(product_data)

        except Exception as e:
            print(f" ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä: {e}")
            continue

    print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    return {
        "table_headers": table_headers,
        "products": products
    }

def parse_custom_list():
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ custom_list —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    products = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    is_product_detail_page = False
    try:
        product_detail_indicators = [".product-detail-gallery__container", ".product-main", ".product-info", "div[class*='product-detail']"]
        
        for indicator in product_detail_indicators:
            if driver.find_elements(By.CSS_SELECTOR, indicator):
                is_product_detail_page = True
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                break
    except:
        pass

    if is_product_detail_page:
        return parse_single_product_page()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    try:
        full_list_link = driver.find_element(By.CSS_SELECTOR, "div.module-pagination a.link")
        href = full_list_link.get_attribute("href")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {href}")
        driver.get(href)
        time.sleep(1.5)
    except:
        print(" ‚Üí –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
    item_selectors = [
        "div.list_item.item_info.catalog-adaptive.flexbox.flexbox--row",
        "div.list_item_wrapp.item_wrapp.item.item-parent.clearfix",
        "div.list_item_info.catalog-adaptive.flexbox",
        ".list_item.item_info.catalog-adaptive",
        ".list_item_wrapp",
        "div.list_item", 
        "a.thumb",
        ".catalog-adaptive"
    ]
    
    list_items = []
    for selector in item_selectors:
        try:
            list_items = driver.find_elements(By.CSS_SELECTOR, selector)
            if list_items:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector} ({len(list_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                break
        except Exception as e:
            continue
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ custom_list: {len(list_items)}")
    
    if not list_items:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return []
    
    for i, item in enumerate(list_items):
        try:
            product_data = {
                "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "url": None,
                "image_url": None,
                "price": None,
                "preorder_price": None,
                "is_preorder": False
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É
            try:
                link_selectors = [
                    "a.dark_link.js-notice-block__title",
                    ".list_item_wrap a[href*='/catalog/']",
                    ".list_item_info a[href*='/catalog/']",
                    "a[href*='/catalog/']",
                    "a.product-link",
                    "a"
                ]
                
                product_link = None
                for selector in link_selectors:
                    try:
                        product_link = item.find_element(By.CSS_SELECTOR, selector)
                        break
                    except:
                        continue
                
                if product_link:
                    product_data["url"] = product_link.get_attribute('href')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    try:
                        name_selectors = ["span.font_md", "span", ".js-notice-block__title span"]
                        
                        name_found = False
                        for name_sel in name_selectors:
                            try:
                                name_elem = product_link.find_element(By.CSS_SELECTOR, name_sel)
                                product_data["name"] = name_elem.text.strip()
                                name_found = True
                                break
                            except:
                                continue
                        
                        if not name_found:
                            product_data["name"] = product_link.text.strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    except:
                        product_data["name"] = product_link.text.strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                image_found = False
                
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ span —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å data-src
                try:
                    span_selectors = ["span.section-gallery-wrapper__item", ".section-gallery-wrapper span[data-src]", "span[data-src*='.jpg']", "span[data-src*='.png']", "span[data-src*='.jpeg']"]
                    
                    for selector in span_selectors:
                        try:
                            span_elem = item.find_element(By.CSS_SELECTOR, selector)
                            image_url = span_elem.get_attribute('data-src')
                            
                            if image_url:
                                if not image_url.startswith('http'):
                                    if image_url.startswith('//'):
                                        image_url = 'https:' + image_url
                                    elif image_url.startswith('/'):
                                        image_url = 'https://cnc1.ru' + image_url
                                product_data["image_url"] = image_url
                                image_found = True
                                break
                        except:
                            continue
                except:
                    pass
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ span —Å data-src, –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ img —Ç–µ–≥–∏
                if not image_found:
                    image_selectors = [".image_block img", ".list_item_wrap .image_block img", ".section-gallery-wrapper.flexbox img", "div.section-gallery-wrapper img", ".section-gallery-wrapper img", ".item_info img", "img"]
                    
                    for selector in image_selectors:
                        try:
                            image_elem = item.find_element(By.CSS_SELECTOR, selector)
                            image_url = image_elem.get_attribute('data-src') or image_elem.get_attribute('src')
                            
                            if image_url:
                                if not image_url.startswith('http'):
                                    if image_url.startswith('//'):
                                        image_url = 'https:' + image_url
                                    elif image_url.startswith('/'):
                                        image_url = 'https://cnc1.ru' + image_url
                                product_data["image_url"] = image_url
                                image_found = True
                                break
                        except:
                            continue
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            try:
                price_selectors = [".price_matrix_wrapper .price", ".cost.price.clearfix", ".information_wrap .cost.price", "span.values_wrapper", "span.price_measure", ".price.font-bold.font_mxs", ".values_wrapper", ".price_measure", ".price", "[data-currency]", "[data-value*='RUB']"]
                
                for selector in price_selectors:
                    try:
                        price_elem = item.find_element(By.CSS_SELECTOR, selector)
                        price_text = price_elem.text.strip()
                        if price_text and any(char.isdigit() for char in price_text):
                            product_data["price"] = price_text
                            break
                    except:
                        continue
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            products.append(product_data)
                
        except Exception as e:
            print(f"   ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä {i+1}: {e}")
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ custom_list: {len(products)}")
    return products

def parse_single_product_page():
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        product_data = {
            "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "url": driver.current_url,
            "image_url": None,
            "price": None,
            "preorder_price": None,
            "is_preorder": False,
            "characteristics": {}
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        try:
            title_selectors = ["h1.product-main__title", "h1[itemprop='name']", ".product-main h1", ".product-info h1", "h1"]
            
            for selector in title_selectors:
                try:
                    title_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    product_data["name"] = title_elem.text.strip()
                    print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['name']}")
                    break
                except:
                    continue
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            image_found = False
            
            image_selectors = [".product-detail-gallery__container--vertical link[href]", ".product-detail-gallery__container link[href]", ".product-detail-gallery__container a[href*='.jpg']", ".product-detail-gallery__container a[href*='.png']", ".product-detail-gallery__container a[href*='.jpeg']", ".product-detail-gallery__container a.fancy.popup_link", ".product-detail-gallery__container .fancy[href]"]
            
            for selector in image_selectors:
                try:
                    image_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    image_url = image_elem.get_attribute('href')
                    
                    if image_url and any(ext in image_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                        if not image_url.startswith('http'):
                            if image_url.startswith('//'):
                                image_url = 'https:' + image_url
                            elif image_url.startswith('/'):
                                image_url = 'https://cnc1.ru' + image_url
                        
                        product_data["image_url"] = image_url
                        image_found = True
                        print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {image_url}")
                        break
                except Exception as e:
                    continue
            
            if not image_found:
                img_selectors = [".product-detail-gallery__container img[src]", ".product-detail-gallery__container img[data-src]", ".product-detail-gallery img"]
                
                for selector in img_selectors:
                    try:
                        img_elem = driver.find_element(By.CSS_SELECTOR, selector)
                        image_url = img_elem.get_attribute('data-src') or img_elem.get_attribute('src')
                        
                        if image_url:
                            if not image_url.startswith('http'):
                                if image_url.startswith('//'):
                                    image_url = 'https:' + image_url
                                elif image_url.startswith('/'):
                                    image_url = 'https://cnc1.ru' + image_url
                            
                            product_data["image_url"] = image_url
                            image_found = True
                            print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (img): {image_url}")
                            break
                    except:
                        continue
            
            if not image_found:
                print("   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
        try:
            price_found = False
            price_selectors = [".price.font-bold.font_mxs", ".price.font-bold", ".price_detail", ".cost.font-bold", "[data-currency='RUB']", ".price"]
            
            for selector in price_selectors:
                try:
                    price_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    price_text = price_elem.text.strip()
                    
                    if price_text and any(char.isdigit() for char in price_text):
                        product_data["price"] = price_text
                        price_found = True
                        print(f"   ‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {price_text}")
                        break
                except:
                    continue
            
            if not price_found:
                print("   ‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
        try:
            characteristics_table = driver.find_elements(By.CSS_SELECTOR, ".characteristics table tr")
            for row in characteristics_table:
                try:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) >= 2:
                        key = cells[0].text.strip()
                        value = cells[1].text.strip()
                        if key and value:
                            product_data["characteristics"][key] = value
                except:
                    continue
        except:
            pass
        
        print(f"   üì¶ –¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {product_data['name']}")
        return [product_data]
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {e}")
        return []

def parse_grandchildren():
    """–ü–∞—Ä—Å–∏—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–Ω—É–∫–∏)"""
    try:
        links = driver.find_elements(By.CSS_SELECTOR, 'a.item_block_href')

        grandchildren = []
        for link in links:
            title_elem = link.find_element(By.CSS_SELECTOR, 'span.font_md')
            product_name = title_elem.text.strip()
            product_url = link.get_attribute('href')

            if product_name and product_url:
                grandchildren.append({
                    "name": product_name,
                    "url": product_url
                })

        print(f" –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(grandchildren)}")
        return grandchildren

    except Exception as e:
        print(f" –ù–µ—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        return []

# === –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê ===
print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
print("8. –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üß™")

mode_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (8): ").strip()

chrome_options = Options()
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-plugins")

if mode_choice == "8":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    driver = webdriver.Chrome(options=chrome_options)
    url = input("–í–≤–µ–¥–∏—Ç–µ URL –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")
    driver.get(url)
    time.sleep(2)

    print("\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò")
    print("="*60)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_categories = driver.find_elements(By.CSS_SELECTOR, 'a.icons_fa.parent.rounded2.bordered')
    print(f'üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(main_categories)}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories_list = []
    for i, main_cat in enumerate(main_categories):
        try:
            cat_name = get_category_name(main_cat)
            categories_list.append((cat_name, main_cat))
            print(f"{i+1}. {cat_name}")
        except Exception as e:
            print(f"{i+1}. –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(categories_list)}): ").strip()
        category_index = int(choice) - 1
        
        if 0 <= category_index < len(categories_list):
            selected_category_name, selected_category_element = categories_list[category_index]
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = get_subcategories(selected_category_element)
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcategories)}")
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
            clear_category_collector()
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            parsing_state["start_time"] = datetime.now()
            
            for sub_index, sub in enumerate(subcategories):
                try:
                    sub_name = sub["name"]
                    sub_url = sub["url"]
                    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {sub_name} ({sub_index + 1}/{len(subcategories)})")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if not safe_get_page(sub_url):
                        print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sub_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        continue
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    items = safe_parse_with_retry(get_products, f"{selected_category_name} -> {sub_name}")
                    
                    if isinstance(items, dict) and "structured_blocks" in items:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
                        for block in items["blocks"]:
                            block_info = {
                                "block_title": block.get("block_title", ""),
                                "block_image": block.get("block_image", ""),
                                "table_headers": block.get("table_headers", [])
                            }
                            add_to_category_collector(
                                selected_category_name, 
                                sub_name, 
                                block.get("products", []), 
                                block_info,
                                is_structured_block=True
                            )
                        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items['blocks'])} –±–ª–æ–∫–æ–≤")
                        
                    elif isinstance(items, dict) and "products" in items:
                        # –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                        block_info = {
                            "block_title": f"–¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ - {sub_name}",
                            "block_image": "",
                            "table_headers": items.get("table_headers", [])
                        }
                        add_to_category_collector(selected_category_name, sub_name, items["products"], block_info, is_structured_block=True)
                        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                    elif items and isinstance(items[0], dict) and "name" in items[0]:
                        if "article" not in items[0]:
                            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
                            print(f"  üîó –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2)")
                            for grand in items[:2]:
                                try:
                                    print(f"    üîç –ü–∞—Ä—Å–∏–º –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {grand['name']}")
                                    
                                    if not safe_get_page(grand["url"]):
                                        continue
                                    
                                    grand_result = safe_parse_with_retry(
                                        parse_structured_products, 
                                        f"{selected_category_name} -> {sub_name} -> {grand['name']}"
                                    )
                                    
                                    if isinstance(grand_result, dict) and "structured_blocks" in grand_result:
                                        for block in grand_result["blocks"]:
                                            block_info = {
                                                "block_title": block.get("block_title", ""),
                                                "block_image": block.get("block_image", ""),
                                                "table_headers": block.get("table_headers", [])
                                            }
                                            add_to_category_collector(
                                                selected_category_name, 
                                                [sub_name, grand['name']], 
                                                block.get("products", []), 
                                                block_info,
                                                is_structured_block=True
                                            )
                                        print(f"    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(grand_result['blocks'])} –±–ª–æ–∫–æ–≤")
                                        
                                except Exception as e:
                                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {grand['name']}: {e}")
                        else:
                            # –≠—Ç–æ —Ç–æ–≤–∞—Ä—ã custom_list (–æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
                            add_to_category_collector(selected_category_name, sub_name, items, is_structured_block=False)
                            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ (custom_list)")
                    else:
                        print(f"  ‚ö†Ô∏è –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {sub_name}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û EXCEL –§–ê–ô–õ–ê")
            print("="*50)
            
            excel_file = save_category_based_excel()
            
            if excel_file:
                print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(excel_file)}")
                print(f"üìÅ –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: results/")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if selected_category_name in category_data_collector:
                    stats = category_data_collector[selected_category_name]["statistics"]
                    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò '{selected_category_name}':")
                    print(f"   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}")
                    print(f"   üóÇÔ∏è –ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_blocks']}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
driver.quit() 