from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import asyncio
import csv
import os
from datetime import datetime
import threading
from concurrent.futures import ThreadPoolExecutor
import queue
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font, PatternFill, Alignment

# === CSV –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ===

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
excel_data_collector = {
    "all_products": [],  # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    "categories_summary": [],  # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    "parsing_log": []  # –õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞
}

# –ù–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
category_data_collector = {}



# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
parsing_state = {
    "current_category": 0,
    "current_subcategory": 0,
    "total_categories": 0,
    "processed_items": 0,
    "last_successful_url": "",
    "start_time": None
}

def restart_browser():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é"""
    global driver
    try:
        if 'driver' in globals() and driver:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            driver.quit()
            time.sleep(2)
        
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--memory-pressure-off")
        
        driver = webdriver.Chrome(options=chrome_options)
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        return False

def safe_get_page(url, retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    global driver
    
    for attempt in range(retries):
        try:
            print(f"   üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            driver.get(url)
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if "Error" not in driver.title and len(driver.page_source) > 1000:
                parsing_state["last_successful_url"] = url
                return True
            else:
                print(f"   ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
            if attempt < retries - 1:
                print(f"   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                if not restart_browser():
                    continue
                time.sleep(3)
            
    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return False

def safe_parse_with_retry(parse_function, context=""):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    retries = 2
    
    for attempt in range(retries):
        try:
            result = parse_function()
            if result:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                return result
            else:
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {context} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {context} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
            if attempt < retries - 1:
                print(f"   üîÑ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(5)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                try:
                    driver.refresh()
                    time.sleep(3)
                except:
                    restart_browser()
                    if parsing_state["last_successful_url"]:
                        safe_get_page(parsing_state["last_successful_url"])
    
    print(f"   ‚ùå –ü–∞—Ä—Å–∏–Ω–≥ {context} –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")
    return []

def save_progress_checkpoint():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    try:
        if excel_data_collector["all_products"]:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            checkpoint_file = f"checkpoint_progress_{timestamp}.xlsx"
            filepath = os.path.join("results", checkpoint_file)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π Excel —Ñ–∞–π–ª
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                if excel_data_collector["all_products"]:
                    df = pd.DataFrame(excel_data_collector["all_products"])
                    df.to_excel(writer, sheet_name='–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
                state_df = pd.DataFrame([parsing_state])
                state_df.to_excel(writer, sheet_name='–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞', index=False)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {checkpoint_file}")
            print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {len(excel_data_collector['all_products'])}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

def update_parsing_progress(category_index, subcategory_index, total_categories):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    parsing_state["current_category"] = category_index
    parsing_state["current_subcategory"] = subcategory_index
    parsing_state["total_categories"] = total_categories
    parsing_state["processed_items"] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if parsing_state["processed_items"] % 10 == 0:
        save_progress_checkpoint()

def add_to_excel_collector(data, category_name, subcategory_name, data_type="products"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–ª—è Excel"""
    global excel_data_collector
    
    timestamp = datetime.now().isoformat()
    
    if data_type == "structured_blocks":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        products_count = 0
        for block in data:
            block_title = block.get('block_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫')
            block_image = block.get('block_image', '')
            table_headers = ', '.join(block.get('table_headers', []))
            
            for product in block.get('products', []):
                row = {
                    'category': category_name,
                    'subcategory': subcategory_name,
                    'block_title': block_title,
                    'block_image': block_image,
                    'name': product.get('name', ''),
                    'url': product.get('url', ''),
                    'article': product.get('article', ''),
                    'image_url': product.get('image_url', ''),
                    'timestamp': timestamp,
                    'data_type': 'table_product',
                    'table_headers': block.get('table_headers', [])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞ –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞
                for key, value in product.items():
                    if key not in ['name', 'url', 'article', 'image_url'] and not key.startswith('_'):
                        row[key] = str(value) if value is not None else ''
                
                excel_data_collector["all_products"].append(row)
                products_count += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        excel_data_collector["parsing_log"].append({
            'timestamp': timestamp,
            'category': category_name,
            'subcategory': subcategory_name,
            'action': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data)} –±–ª–æ–∫–æ–≤, {products_count} —Ç–æ–≤–∞—Ä–æ–≤',
            'data_type': 'structured_blocks'
        })
        
    elif data_type == "custom_list":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º custom_list —Ç–æ–≤–∞—Ä—ã
        for product in data:
            row = {
                'category': category_name,
                'subcategory': subcategory_name,
                'name': product.get('name', ''),
                'url': product.get('url', ''),
                'image_url': product.get('image_url', ''),
                'price': product.get('price', ''),
                'preorder_price': product.get('preorder_price', ''),
                'is_preorder': product.get('is_preorder', False),
                'timestamp': timestamp,
                'data_type': 'custom_list_product'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
            for key, value in product.items():
                if key not in ['name', 'url', 'image_url', 'price', 'preorder_price', 'is_preorder'] and not key.startswith('_'):
                    row[key] = str(value) if value is not None else ''
            
            excel_data_collector["all_products"].append(row)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        excel_data_collector["parsing_log"].append({
            'timestamp': timestamp,
            'category': category_name,
            'subcategory': subcategory_name,
            'action': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ (custom_list)',
            'data_type': 'custom_list'
        })
    
    elif data_type == "regular_products":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        for product in data:
            row = {
                'category': category_name,
                'subcategory': subcategory_name,
                'name': product.get('name', ''),
                'url': product.get('url', ''),
                'article': product.get('article', ''),
                'image_url': product.get('image_url', ''),
                'timestamp': timestamp,
                'data_type': 'regular_product'
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ë–ï–ó –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            for key, value in product.items():
                if key not in ['name', 'url', 'article', 'image_url'] and not key.startswith('_'):
                    row[key] = str(value) if value is not None else ''
            
            excel_data_collector["all_products"].append(row)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        excel_data_collector["parsing_log"].append({
            'timestamp': timestamp,
            'category': category_name,
            'subcategory': subcategory_name,
            'action': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤',
            'data_type': 'regular_products'
        })

def create_summary_statistics():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    global excel_data_collector
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories_stats = {}
    
    for product in excel_data_collector["all_products"]:
        cat = product.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
        subcat = product.get('subcategory', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')
        data_type = product.get('data_type', 'unknown')
        
        if cat not in categories_stats:
            categories_stats[cat] = {
                'total_products': 0,
                'subcategories': {},
                'data_types': {}
            }
        
        categories_stats[cat]['total_products'] += 1
        
        if subcat not in categories_stats[cat]['subcategories']:
            categories_stats[cat]['subcategories'][subcat] = 0
        categories_stats[cat]['subcategories'][subcat] += 1
        
        if data_type not in categories_stats[cat]['data_types']:
            categories_stats[cat]['data_types'][data_type] = 0
        categories_stats[cat]['data_types'][data_type] += 1
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è Excel
    summary_data = []
    for cat_name, stats in categories_stats.items():
        summary_data.append({
            'category': cat_name,
            'total_products': stats['total_products'],
            'subcategories_count': len(stats['subcategories']),
            'subcategories_list': ', '.join(stats['subcategories'].keys()),
            'data_types': ', '.join(f"{k}: {v}" for k, v in stats['data_types'].items())
        })
    
    excel_data_collector["categories_summary"] = summary_data

def save_consolidated_excel():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏"""
    global excel_data_collector
    
    if not excel_data_collector["all_products"]:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        create_summary_statistics()
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"parsed_data_consolidated_{timestamp}.xlsx"
        filepath = os.path.join("results", filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        data_types_count = {}
        for product in excel_data_collector["all_products"]:
            data_type = product.get('data_type', 'unknown')
            data_types_count[data_type] = data_types_count.get(data_type, 0) + 1
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞: {filename}")
        print(f"   ‚Üí –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(excel_data_collector['all_products'])}")
        print(f"   ‚Üí –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {data_types_count}")
        print(f"   ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(excel_data_collector['categories_summary'])}")
        print(f"   ‚Üí –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ: {len(excel_data_collector['parsing_log'])}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—è—Ö
        if excel_data_collector["all_products"]:
            sample_product = excel_data_collector["all_products"][0]
            print(f"   üîç –ü–æ–ª—è –≤ –ø–µ—Ä–≤–æ–º —Ç–æ–≤–∞—Ä–µ: {list(sample_product.keys())}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –Ω–µ–ø—É—Å—Ç–æ–π image_url
            image_url_count = sum(1 for p in excel_data_collector["all_products"] if p.get('image_url') and p.get('image_url').strip())
            print(f"   üñºÔ∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {image_url_count}/{len(excel_data_collector['all_products'])}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –∫–Ω–∏–≥—É
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü (–ø–æ –Ω–∞–±–æ—Ä–∞–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            tables_by_headers = {}
            
            for product in excel_data_collector["all_products"]:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                headers = tuple(sorted([k for k in product.keys() if k not in ['category', 'subcategory', 'data_type', 'table_headers']]))
                
                if headers not in tables_by_headers:
                    tables_by_headers[headers] = {
                        'products': [],
                        'category': product.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'),
                        'subcategory': product.get('subcategory', ''),
                        'table_headers': product.get('table_headers', [])
                    }
                
                tables_by_headers[headers]['products'].append(product)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tables_by_headers)} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Ç–∞–±–ª–∏—Ü")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
            sheet_counter = 1
            for headers, table_data in tables_by_headers.items():
                products = table_data['products']
                category = table_data['category']
                subcategory = table_data['subcategory']
                
                if products:
                    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    df = pd.DataFrame(products)
                    
                    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    columns_to_remove = ['data_type', 'table_headers']
                    df = df.drop(columns=[col for col in columns_to_remove if col in df.columns], errors='ignore')
                    
                    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –Ω–∞—á–∞–ª–µ
                    basic_columns = ['name', 'article', 'url', 'image_url', 'category', 'subcategory']
                    other_columns = [col for col in df.columns if col not in basic_columns]
                    ordered_columns = [col for col in basic_columns if col in df.columns] + other_columns
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
                    missing_basic = [col for col in basic_columns if col not in df.columns]
                    if missing_basic:
                        print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_basic}")
                    
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç—ã–µ)
                    for col in basic_columns:
                        if col not in df.columns:
                            df[col] = ''  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–æ–ª–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    
                    # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    other_columns = [col for col in df.columns if col not in basic_columns]
                    ordered_columns = basic_columns + other_columns
                    df = df[ordered_columns]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
                    if subcategory:
                        sheet_name = f"{category}_{subcategory}"[:31]
                    else:
                        sheet_name = f"{category}_—Ç–∞–±–ª–∏—Ü–∞_{sheet_counter}"[:31]
                    
                    # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                    invalid_chars = ['\\', '/', '*', '[', ']', ':', '?']
                    for char in invalid_chars:
                        sheet_name = sheet_name.replace(char, '_')
                    
                    df.to_excel(writer, sheet_name=sheet_name, index=False)
                    print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '{sheet_name}' ({len(df)} —Ç–æ–≤–∞—Ä–æ–≤, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫)")
                    print(f"       –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
                    
                    sheet_counter += 1
            
            # –õ–∏—Å—Ç: –í—Å–µ —Ç–æ–≤–∞—Ä—ã (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π)
            if excel_data_collector["all_products"]:
                all_products_df = pd.DataFrame(excel_data_collector["all_products"])
                # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                columns_to_remove = ['table_headers']
                all_products_df = all_products_df.drop(columns=[col for col in columns_to_remove if col in all_products_df.columns], errors='ignore')
                all_products_df.to_excel(writer, sheet_name='–í—Å–µ —Ç–æ–≤–∞—Ä—ã (–æ–±—â–∏–π)', index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–í—Å–µ —Ç–æ–≤–∞—Ä—ã (–æ–±—â–∏–π)' ({len(all_products_df)} —Å—Ç—Ä–æ–∫)")
            
            # –õ–∏—Å—Ç: –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if excel_data_collector["categories_summary"]:
                summary_df = pd.DataFrame(excel_data_collector["categories_summary"])
                summary_df.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º' ({len(summary_df)} —Å—Ç—Ä–æ–∫)")
            
            # –õ–∏—Å—Ç: –õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞
            if excel_data_collector["parsing_log"]:
                log_df = pd.DataFrame(excel_data_collector["parsing_log"])
                log_df.to_excel(writer, sheet_name='–õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞', index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞' ({len(log_df)} —Å—Ç—Ä–æ–∫)")
            
            # –õ–∏—Å—Ç: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
            if data_types_count:
                stats_data = []
                for data_type, count in data_types_count.items():
                    stats_data.append({
                        '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data_type,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤': count,
                        '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ': f"{count / len(excel_data_collector['all_products']) * 100:.1f}%"
                    })
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤', index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤' ({len(stats_df)} —Å—Ç—Ä–æ–∫)")
        
        print(f"üéâ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filepath) / 1024 / 1024:.2f} –ú–ë")
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        excel_data_collector = {
            "all_products": [],
            "categories_summary": [],
            "parsing_log": []
        }
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None

def create_csv_filename(category_name):
    """–°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ CSV –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_name = "".join(c for c in category_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
    return f"parsed_data_{safe_name}_{timestamp}.csv"

def save_to_csv(data, filename, category_name="", subcategory_name=""):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å"""
    if not data:
        print(f"   ‚Üí –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {filename}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    if category_name and subcategory_name:
        add_to_excel_collector(data, category_name, subcategory_name, "regular_products")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)
        filepath = os.path.join("results", filename)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 —Å BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        with open(filepath, 'w', newline='', encoding='utf-8-sig') as csvfile:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if isinstance(data, list) and data:
                first_item = data[0]
                if isinstance(first_item, dict):
                    fieldnames = list(first_item.keys())
                else:
                    fieldnames = ['category', 'subcategory', 'item_name', 'url', 'type']
            else:
                fieldnames = ['category', 'subcategory', 'item_name', 'url', 'type']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if 'category' not in fieldnames:
                fieldnames.insert(0, 'category')
            if 'subcategory' not in fieldnames:
                fieldnames.insert(1, 'subcategory')
            if 'timestamp' not in fieldnames:
                fieldnames.append('timestamp')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è Excel
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
            writer.writeheader()
            
            timestamp = datetime.now().isoformat()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for item in data:
                if isinstance(item, dict):
                    row = item.copy()
                    row['category'] = category_name
                    row['timestamp'] = timestamp
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    for key, value in row.items():
                        if isinstance(value, str):
                            # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ CSV
                            row[key] = value.replace('\n', ' ').replace('\r', ' ').replace(';', ',')
                    
                    writer.writerow(row)
                
        print(f"   ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –≤ {filepath}")
        print(f"   üìä –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è Excel (UTF-8 —Å BOM, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';')")
        
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV {filename}: {e}")

def save_structured_blocks_to_csv(blocks_data, filename, category_name, subcategory_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –≤ CSV –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å"""
    if not blocks_data:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
    add_to_excel_collector(blocks_data, category_name, subcategory_name, "structured_blocks")
        
    csv_data = []
    timestamp = datetime.now().isoformat()
    
    for block in blocks_data:
        block_title = block.get('block_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫')
        block_image = block.get('block_image', '')
        table_headers = ', '.join(block.get('table_headers', []))
        
        for product in block.get('products', []):
            row = {
                'category': category_name,
                'subcategory': subcategory_name,
                'block_title': block_title,
                'block_image': block_image,
                'table_headers': table_headers,
                'product_name': product.get('name', ''),
                'product_url': product.get('url', ''),
                'product_article': product.get('article', ''),
                'timestamp': timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–∞
            for key, value in product.items():
                if key not in ['name', 'url', 'article']:
                    row[f'param_{key}'] = str(value)
            
            csv_data.append(row)
    
    if csv_data:
        save_to_csv(csv_data, filename, category_name, subcategory_name)

def save_custom_list_to_csv(products_data, filename, category_name, subcategory_name):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ custom_list –≤ CSV –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å"""
    if not products_data:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
    add_to_excel_collector(products_data, category_name, subcategory_name, "custom_list")
        
    csv_data = []
    timestamp = datetime.now().isoformat()
    
    for product in products_data:
        row = {
            'category': category_name,
            'subcategory': subcategory_name,
            'product_name': product.get('name', ''),
            'product_url': product.get('url', ''),
            'image_url': product.get('image_url', ''),
            'price': product.get('price', ''),
            'preorder_price': product.get('preorder_price', ''),
            'is_preorder': product.get('is_preorder', False),
            'timestamp': timestamp
        }
        csv_data.append(row)
    
    if csv_data:
        save_to_csv(csv_data, filename, category_name, subcategory_name)

def fix_existing_csv_files():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ CSV —Ñ–∞–π–ª—ã: –∫–æ–¥–∏—Ä–æ–≤–∫–∞ + —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è Excel"""
    if not os.path.exists("results"):
        print("–ü–∞–ø–∫–∞ results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    csv_files = [f for f in os.listdir("results") if f.endswith('.csv')]
    if not csv_files:
        print("CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {len(csv_files)} CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel...")
    print("   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (UTF-8 —Å BOM)")
    print("   - –ó–∞–º–µ–Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –Ω–∞ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π")
    
    for filename in csv_files:
        try:
            filepath = os.path.join("results", filename)
            
            # –ß–∏—Ç–∞–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
            content = None
            for encoding in ['utf-8', 'utf-8-sig', 'cp1251', 'windows-1251']:
                try:
                    with open(filepath, 'r', encoding=encoding) as file:
                        content = file.read()
                    break
                except UnicodeDecodeError:
                    continue
            
            if content is None:
                print(f"   ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {filename} - –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
                continue
            
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if ',' in content and ';' not in content:
                content = content.replace(',', ';')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Excel
            with open(filepath, 'w', encoding='utf-8-sig', newline='') as file:
                file.write(content)
            
            print(f"   ‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {filename}")
            
        except Exception as e:
            print(f"   ‚úó –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è {filename}: {e}")
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Excel:")
    print("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–∞–Ω–Ω—ã–µ' ‚Üí '–ò–∑ —Ç–µ–∫—Å—Ç–∞/CSV'")
    print("   2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8")
    print("   3. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)")

def create_excel_compatible_csv():
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ CSV —Ñ–∞–π–ª–æ–≤"""
    if not os.path.exists("results"):
        print("–ü–∞–ø–∫–∞ results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    csv_files = [f for f in os.listdir("results") if f.endswith('.csv')]
    if not csv_files:
        print("CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π {len(csv_files)} —Ñ–∞–π–ª–æ–≤...")
    
    for filename in csv_files:
        try:
            if filename.startswith('excel_'):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                
            filepath = os.path.join("results", filename)
            excel_filename = f"excel_{filename}"
            excel_filepath = os.path.join("results", excel_filename)
            
            # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            rows = []
            with open(filepath, 'r', encoding='utf-8-sig') as file:
                reader = csv.reader(file, delimiter=';')
                rows = list(reader)
            
            if not rows:
                continue
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Excel-–≤–µ—Ä—Å–∏—é
            with open(excel_filepath, 'w', newline='', encoding='utf-8-sig') as file:
                writer = csv.writer(file, delimiter=';', quoting=csv.QUOTE_ALL)
                writer.writerows(rows)
            
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω Excel-—Ñ–∞–π–ª: {excel_filename}")
            
        except Exception as e:
            print(f"   ‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel-–≤–µ—Ä—Å–∏–∏ –¥–ª—è {filename}: {e}")
    
    print("‚úÖ Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã!")

class AsyncWebDriver:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è WebDriver —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    def __init__(self):
        self.driver = None
        self.lock = threading.Lock()
    
    def create_driver(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--headless")  # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        
        self.driver = webdriver.Chrome(options=chrome_options)
        return self.driver
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç WebDriver"""
        if self.driver:
            self.driver.quit()
            self.driver = None

def process_category_async(category_data, results_queue):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
    category_name = category_data["name"]
    subcategories = category_data["subcategories"]
    
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name} ({len(subcategories)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π WebDriver –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async_driver = AsyncWebDriver()
    driver = async_driver.create_driver()
    
    try:
        category_results = []
        
        for sub in subcategories:
            sub_name = sub["name"]
            sub_url = sub["url"]
            
            print(f"  üîç –û–±—Ä–∞–±–æ—Ç–∫–∞: {sub_name}")
            
            try:
                driver.get(sub_url)
                time.sleep(1.5)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é driver –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
                globals()['driver'] = driver
                
                items = get_products()
                
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                filename = create_csv_filename(f"{category_name}_{sub_name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if isinstance(items, dict) and "structured_blocks" in items:
                    save_structured_blocks_to_csv(items["blocks"], filename, category_name, sub_name)
                    all_products = []
                    for block in items["blocks"]:
                        all_products.extend(block.get("products", []))
                    sub["products"] = all_products
                    sub["product_blocks"] = items["blocks"]
                    
                elif isinstance(items, dict) and "products" in items:
                    save_to_csv(items["products"], filename, category_name, sub_name)
                    sub["products"] = items["products"]
                    sub["table_headers"] = items.get("table_headers", [])
                    
                elif items and isinstance(items[0], dict) and "name" in items[0]:
                    if "article" not in items[0]:  # –≠—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        sub["grandchildren"] = items
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                        for grand in items:
                            try:
                                driver.get(grand["url"])
                                time.sleep(1.5)
                                grand_result = parse_structured_products()
                                
                                if isinstance(grand_result, dict) and "structured_blocks" in grand_result:
                                    grand_filename = create_csv_filename(f"{category_name}_{sub_name}_{grand['name']}")
                                    save_structured_blocks_to_csv(grand_result["blocks"], grand_filename, category_name, f"{sub_name}_{grand['name']}")
                                    grand["product_blocks"] = grand_result["blocks"]
                                    
                            except Exception as e:
                                print(f"    ‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {grand['name']}: {e}")
                    else:  # –≠—Ç–æ —Ç–æ–≤–∞—Ä—ã custom_list
                        save_custom_list_to_csv(items, filename, category_name, sub_name)
                        sub["products"] = items
                        
                print(f"  ‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {sub_name}")
                
            except Exception as e:
                print(f"  ‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {sub_name}: {e}")
                sub["products"] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å
        results_queue.put({
            "category": category_data,
            "status": "completed",
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(subcategories)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        })
        
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
        
    except Exception as e:
        results_queue.put({
            "category": category_data,
            "status": "error", 
            "message": f"–û—à–∏–±–∫–∞: {e}"
        })
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {e}")
        
    finally:
        async_driver.close()

def get_category_name(category_element):
    try:
        name_span = category_element.find_element(By.CSS_SELECTOR, 'span.name')
        return driver.execute_script("return arguments[0].textContent;", name_span).strip()
    except:
        return "Unknown Category"
    
def get_subcategories(main_cat):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏""" 
    try:
        dropdown = main_cat.find_element(
            By.XPATH,
            "./following-sibling::ul[contains(@class, 'dropdown') and contains(@class, 'scrollblock')]"
        )
        links = dropdown.find_elements(By.CSS_SELECTOR, 'a.section.option-font-bold')
        
        subcategories = []
        for link in links:
            href = link.get_attribute("href")
            text = driver.execute_script("return arguments[0].textContent;", link).strip()
            subcategories.append({"name": text, "url": href})
        return subcategories
    except Exception as e:
        print(f"–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π(—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞, —Ç.–∫. –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
def get_products():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–∞—Ä—Å–∏—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–Ω—É–∫–∏).
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å 'name' –∏ 'url'
    """
    try:
        # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ WebDriverWait)
        time.sleep(1.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        tabel_warper = driver.find_elements(
            By.CSS_SELECTOR,
            "div.sections_wrapper.block"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        display_list = driver.find_elements(
            By.CSS_SELECTOR,
            "div.display_list.custom_list.show_un_props"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        new_structure_items = driver.find_elements(
            By.CSS_SELECTOR,
            "div.list_item.item_info.catalog-adaptive.flexbox.flexbox--row"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        any_list_items = driver.find_elements(
            By.CSS_SELECTOR,
            ".list_item.item_info.catalog-adaptive, .list_item_wrapp"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_detail_indicators = [
            ".product-detail-gallery__container",
            ".product-main", 
            ".product-info",
            "h1[itemprop='name']"
        ]
        
        is_single_product = any(driver.find_elements(By.CSS_SELECTOR, indicator) for indicator in product_detail_indicators)

        if tabel_warper:
            print("–ü–∞—Ä—Å–∏–º –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return parse_grandchildren()
        elif is_single_product:
            print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return parse_custom_list()  # parse_custom_list —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        elif display_list or new_structure_items or any_list_items:
            print(f"–ù–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(new_structure_items)}, —Å—Ç–∞—Ä–∞—è: {len(display_list)}, –æ–±—â–∞—è: {len(any_list_items)})")
            return parse_custom_list()
        else:
            print("–ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤")
            return parse_structured_products()

    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []


def parse_custom_list():
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ custom_list —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
    - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ü–µ–Ω—ã, —Å—Å—ã–ª–∫–∏
    - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–Ω—ã—Ö —Ü–µ–Ω
    - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (product-detail)
    """
    products = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    is_product_detail_page = False
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
        product_detail_indicators = [
            ".product-detail-gallery__container",
            ".product-main",
            ".product-info",
            "div[class*='product-detail']"
        ]
        
        for indicator in product_detail_indicators:
            if driver.find_elements(By.CSS_SELECTOR, indicator):
                is_product_detail_page = True
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                break
    except:
        pass

    if is_product_detail_page:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        return parse_single_product_page()
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
    item_selectors = [
        "div.list_item.item_info.catalog-adaptive.flexbox.flexbox--row",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        "div.list_item_wrapp.item_wrapp.item.item-parent.clearfix",  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
        "div.list_item_info.catalog-adaptive.flexbox",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        ".list_item.item_info.catalog-adaptive",  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        ".list_item_wrapp",
        "div.list_item", 
        "a.thumb",
        ".catalog-adaptive"
    ]
    
    list_items = []
    for selector in item_selectors:
        try:
            list_items = driver.find_elements(By.CSS_SELECTOR, selector)
            if list_items:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector} ({len(list_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                break
            else:
                print(f"‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
            continue
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ custom_list: {len(list_items)}")
    
    if not list_items:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü–æ–ø—Ä–æ–±—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        page_content_indicators = [
            "div.sections_wrapper.block",
            "table",
            ".catalog-adaptive",
            ".list_item",
            ".item_info"
        ]
        
        for indicator in page_content_indicators:
            elements = driver.find_elements(By.CSS_SELECTOR, indicator)
            print(f"   üîç {indicator}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return []
    
    for i, item in enumerate(list_items):
        try:
            product_data = {
                "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "url": None,
                "image_url": None,
                "price": None,
                "preorder_price": None,
                "is_preorder": False
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä
                link_selectors = [
                    "a.dark_link.js-notice-block__title",  # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                    ".list_item_wrap a[href*='/catalog/']",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                    ".list_item_info a[href*='/catalog/']",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                    "a[href*='/catalog/']",
                    "a.product-link",
                    "a"
                ]
                
                product_link = None
                for selector in link_selectors:
                    try:
                        product_link = item.find_element(By.CSS_SELECTOR, selector)
                        print(f"   üîó –°—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                    except:
                        continue
                
                if product_link:
                    product_data["url"] = product_link.get_attribute('href')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    try:
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        name_selectors = [
                            "span.font_md",  # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                            "span",  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
                            ".js-notice-block__title span",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                        ]
                        
                        name_found = False
                        for name_sel in name_selectors:
                            try:
                                name_elem = product_link.find_element(By.CSS_SELECTOR, name_sel)
                                product_data["name"] = name_elem.text.strip()
                                name_found = True
                                break
                            except:
                                continue
                        
                        if not name_found:
                            product_data["name"] = product_link.text.strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    except:
                        product_data["name"] = product_link.text.strip() or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ section-gallery-wrapper flexbox
            try:
                image_found = False
                
                # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ span —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å data-src (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
                try:
                    span_selectors = [
                        "span.section-gallery-wrapper__item",
                        ".section-gallery-wrapper span[data-src]",
                        "span[data-src*='.jpg']",
                        "span[data-src*='.png']",
                        "span[data-src*='.jpeg']"
                    ]
                    
                    for selector in span_selectors:
                        try:
                            span_elem = item.find_element(By.CSS_SELECTOR, selector)
                            image_url = span_elem.get_attribute('data-src')
                            
                            if image_url:
                                if not image_url.startswith('http'):
                                    if image_url.startswith('//'):
                                        image_url = 'https:' + image_url
                                    elif image_url.startswith('/'):
                                        image_url = 'https://cnc1.ru' + image_url
                                product_data["image_url"] = image_url
                                image_found = True
                                break
                        except:
                            continue
                except:
                    pass
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ span —Å data-src, –∏—â–µ–º –æ–±—ã—á–Ω—ã–µ img —Ç–µ–≥–∏
                if not image_found:
                    image_selectors = [
                        ".image_block img",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                        ".list_item_wrap .image_block img",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                        ".section-gallery-wrapper.flexbox img",  # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                        "div.section-gallery-wrapper img", 
                        ".section-gallery-wrapper img",
                        ".item_info img",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                        "img"
                    ]
                    
                    for selector in image_selectors:
                        try:
                            image_elem = item.find_element(By.CSS_SELECTOR, selector)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ data-src –∏ src
                            image_url = image_elem.get_attribute('data-src') or image_elem.get_attribute('src')
                            
                            if image_url:
                                if not image_url.startswith('http'):
                                    if image_url.startswith('//'):
                                        image_url = 'https:' + image_url
                                    elif image_url.startswith('/'):
                                        image_url = 'https://cnc1.ru' + image_url
                                product_data["image_url"] = image_url
                                image_found = True
                                print(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                                break
                        except:
                            continue
                
                if not image_found:
                    print(f"   ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}")
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            try:
                # –ò—â–µ–º –æ–±—ã—á–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                price_selectors = [
                    ".price_matrix_wrapper .price",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                    ".cost.price.clearfix",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞  
                    ".information_wrap .cost.price",  # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
                    "span.values_wrapper",  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                    "span.price_measure",   # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                    ".price.font-bold.font_mxs",
                    ".values_wrapper",
                    ".price_measure", 
                    ".price",
                    "[data-currency]",
                    "[data-value*='RUB']"
                ]
                
                for selector in price_selectors:
                    try:
                        price_elem = item.find_element(By.CSS_SELECTOR, selector)
                        price_text = price_elem.text.strip()
                        if price_text and any(char.isdigit() for char in price_text):
                            product_data["price"] = price_text
                            print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {price_text}")
                            break
                    except:
                        continue
                        
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, –∏—â–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–Ω—É—é —Ü–µ–Ω—É
            if not product_data["price"]:
                try:
                    preorder_selectors = [
                        ".preorder_button",
                        "[data-name*='preorder']",
                        ".btn-default[href*='order']",
                        ".to-order"
                    ]
                    
                    for selector in preorder_selectors:
                        try:
                            preorder_elem = item.find_element(By.CSS_SELECTOR, selector)
                            preorder_text = preorder_elem.text.strip()
                            if preorder_text:
                                product_data["preorder_price"] = preorder_text
                                product_data["is_preorder"] = True
                                break
                        except:
                            continue
                            
                except Exception as e:
                    print(f"   ‚Üí –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–∫–∞–∑–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {i+1}: {e}")
            
            products.append(product_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"   ‚Üí –¢–æ–≤–∞—Ä {i+1}: {product_data['name']}")
            if product_data["image_url"]:
                print(f"     ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product_data['image_url']}")
            if product_data["price"]:
                print(f"     ‚îú‚îÄ‚îÄ –¶–µ–Ω–∞: {product_data['price']}")
            elif product_data["preorder_price"]:
                print(f"     ‚îú‚îÄ‚îÄ –ü—Ä–µ–¥–∑–∞–∫–∞–∑: {product_data['preorder_price']}")
            if product_data["url"]:
                print(f"     ‚îî‚îÄ‚îÄ –°—Å—ã–ª–∫–∞: {product_data['url']}")
                
        except Exception as e:
            print(f"   ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä {i+1}: {e}")
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ custom_list: {len(products)}")
    return products

def parse_single_product_page():
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π CSS
    """
    try:
        product_data = {
            "name": "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            "url": driver.current_url,
            "image_url": None,
            "price": None,
            "preorder_price": None,
            "is_preorder": False,
            "characteristics": {}
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        try:
            title_selectors = [
                "h1.product-main__title",
                "h1[itemprop='name']",
                ".product-main h1",
                ".product-info h1",
                "h1"
            ]
            
            for selector in title_selectors:
                try:
                    title_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    product_data["name"] = title_elem.text.strip()
                    print(f"   ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['name']}")
                    break
                except:
                    continue
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ product-detail-gallery__container
        try:
            image_found = False
            
            # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
            image_selectors = [
                ".product-detail-gallery__container--vertical link[href]",  # –í —Ç–µ–≥–µ link, –≤ href
                ".product-detail-gallery__container link[href]",
                ".product-detail-gallery__container a[href*='.jpg']",
                ".product-detail-gallery__container a[href*='.png']",
                ".product-detail-gallery__container a[href*='.jpeg']",
                ".product-detail-gallery__container a.fancy.popup_link",
                ".product-detail-gallery__container .fancy[href]"
            ]
            
            for selector in image_selectors:
                try:
                    image_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    image_url = image_elem.get_attribute('href')
                    
                    if image_url and any(ext in image_url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                        if not image_url.startswith('http'):
                            if image_url.startswith('//'):
                                image_url = 'https:' + image_url
                            elif image_url.startswith('/'):
                                image_url = 'https://cnc1.ru' + image_url
                        
                        product_data["image_url"] = image_url
                        image_found = True
                        print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {image_url}")
                        break
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ link/a —Ç–µ–≥–∞—Ö, –∏—â–µ–º –≤ img
            if not image_found:
                img_selectors = [
                    ".product-detail-gallery__container img[src]",
                    ".product-detail-gallery__container img[data-src]",
                    ".product-detail-gallery img"
                ]
                
                for selector in img_selectors:
                    try:
                        img_elem = driver.find_element(By.CSS_SELECTOR, selector)
                        image_url = img_elem.get_attribute('data-src') or img_elem.get_attribute('src')
                        
                        if image_url:
                            if not image_url.startswith('http'):
                                if image_url.startswith('//'):
                                    image_url = 'https:' + image_url
                                elif image_url.startswith('/'):
                                    image_url = 'https://cnc1.ru' + image_url
                            
                            product_data["image_url"] = image_url
                            image_found = True
                            print(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (img): {image_url}")
                            break
                    except:
                        continue
            
            if not image_found:
                print("   ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ .price.font-bold.font_mxs
        try:
            price_found = False
            price_selectors = [
                ".price.font-bold.font_mxs",
                ".price.font-bold",
                ".price_detail",
                ".cost.font-bold",
                "[data-currency='RUB']",
                ".price"
            ]
            
            for selector in price_selectors:
                try:
                    price_elem = driver.find_element(By.CSS_SELECTOR, selector)
                    price_text = price_elem.text.strip()
                    
                    if price_text and any(char.isdigit() for char in price_text):
                        product_data["price"] = price_text
                        price_found = True
                        print(f"   ‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {price_text}")
                        break
                except:
                    continue
            
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, –∏—â–µ–º –ø—Ä–µ–¥–∑–∞–∫–∞–∑–Ω—É—é
            if not price_found:
                preorder_selectors = [
                    ".preorder_button",
                    "[data-name*='preorder']",
                    ".btn[href*='order']",
                    ".to-order",
                    ".order-button"
                ]
                
                for selector in preorder_selectors:
                    try:
                        preorder_elem = driver.find_element(By.CSS_SELECTOR, selector)
                        preorder_text = preorder_elem.text.strip()
                        if preorder_text:
                            product_data["preorder_price"] = preorder_text
                            product_data["is_preorder"] = True
                            print(f"   ‚úÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑–Ω–∞—è —Ü–µ–Ω–∞: {preorder_text}")
                            break
                    except:
                        continue
            
            if not price_found and not product_data["preorder_price"]:
                print("   ‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
        try:
            characteristics_table = driver.find_elements(By.CSS_SELECTOR, ".characteristics table tr")
            for row in characteristics_table:
                try:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) >= 2:
                        key = cells[0].text.strip()
                        value = cells[1].text.strip()
                        if key and value:
                            product_data["characteristics"][key] = value
                except:
                    continue
        except:
            pass
        
        print(f"   üì¶ –¢–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {product_data['name']}")
        return [product_data]
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {e}")
        return []

def get_table_headers():
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    """
    headers = []
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        header_selectors = [
            "tr.table-view__item-wrapper--head th",
            "thead tr th",
            "tr:first-child th", 
            ".table-view__item-wrapper--head th",
            "div.razdel.table_all tr:first-child th",
            "table tr:first-child th"
        ]
        
        header_cells = []
        for selector in header_selectors:
            try:
                header_cells = driver.find_elements(By.CSS_SELECTOR, selector)
                if header_cells:
                    print(f" ‚Üí –ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    break
            except:
                continue
        
        if not header_cells:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ th —ç–ª–µ–º–µ–Ω—Ç—ã
            header_cells = driver.find_elements(By.CSS_SELECTOR, "th")
        
        for cell in header_cells:
            header_text = driver.execute_script("return arguments[0].textContent;", cell).strip()
            if header_text:
                headers.append(header_text)
        
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: {len(headers)}")
        print(f" ‚Üí –ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
        
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        headers = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–∞ –ß–ü–£", "–ú–∞–∫—Å. –¥–∏–∞–º–µ—Ç—Ä –Ω–∞–¥ —Å—Ç–∞–Ω–∏–Ω–æ–π", "–ú–∞–∫—Å. –¥–∏–∞–º–µ—Ç—Ä –Ω–∞–¥ —Å—É–ø–ø–æ—Ä—Ç–æ–º", "–ú–∞–∫—Å. –¥–ª–∏–Ω–∞ —Ç–æ—á–µ–Ω–∏—è", "–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è —à–ø–∏–Ω–¥–µ–ª—è", "–¶–µ–Ω–∞", "–ù–∞–ª–∏—á–∏–µ"]
    
    return headers

def parse_structured_products():
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–∞–º, –∫–∞–∂–¥—ã–π —Å —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü–µ–π, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    try:
        full_list_link = driver.find_element(By.CSS_SELECTOR, "div.module-pagination a.link")
        href = full_list_link.get_attribute("href")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {href}")
        driver.get(href)
        time.sleep(1.5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
    except:
        print(" ‚Üí –°—Å—ã–ª–∫–∞ '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    product_blocks = []
    
    try:
        # –ò—â–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –ø–æ –∫–ª–∞—Å—Å—É razdel table_all
        main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.razdel.table_all")
        
        if not main_blocks:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.section_info_wrapper")
            
        if not main_blocks:
            # –ü—Ä–æ–±—É–µ–º –µ—â—ë –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
            main_blocks = driver.find_elements(By.CSS_SELECTOR, "div.item_block_href")
            
        if not main_blocks:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print(" ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            product_detail_indicators = [
                ".product-detail-gallery__container",
                ".product-main",
                ".product-info",
                "div[class*='product-detail']",
                "h1[itemprop='name']"
            ]
            
            is_single_product = False
            for indicator in product_detail_indicators:
                if driver.find_elements(By.CSS_SELECTOR, indicator):
                    is_single_product = True
                    print(f" ‚Üí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator})")
                    break
            
            if is_single_product:
                # –ü–∞—Ä—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ structured_products
                single_product_data = parse_single_product_page()
                if single_product_data:
                    print(f" ‚Üí –†–∞—Å–ø–∞—Ä—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä: {single_product_data[0].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    return {
                        "structured_blocks": [{
                            "block_title": "–û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä",
                            "block_image": single_product_data[0].get('image_url', ''),
                            "table_headers": [],
                            "products": single_product_data
                        }]
                    }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            list_items = driver.find_elements(By.CSS_SELECTOR, "div.list_item.item_info.catalog-adaptive")
            if list_items:
                print(f" ‚Üí –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ({len(list_items)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_custom_list")
                return parse_custom_list()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
            table_elements = driver.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
            if table_elements:
                print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ ({len(table_elements)} —Å—Ç—Ä–æ–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º parse_table_products")
                return parse_table_products()
            
            print(" ‚Üí –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {"products": [], "table_headers": []}
            
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {len(main_blocks)}")
        
        for i, block in enumerate(main_blocks):
            try:
                block_data = {
                    "block_index": i + 1,
                    "block_title": "",
                    "block_image": None,
                    "table_headers": [],
                    "products": []
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ (–∏—â–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö)
                try:
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö siblings –∏–ª–∏ –≤ —Å–∞–º–æ–º –±–ª–æ–∫–µ
                    title_found = False
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    try:
                        prev_element = driver.execute_script("return arguments[0].previousElementSibling;", block)
                        if prev_element:
                            title_selectors = ["h1", "h2", "h3", ".section_title", "span.font_md", ".title"]
                            for selector in title_selectors:
                                try:
                                    title_elem = prev_element.find_element(By.CSS_SELECTOR, selector)
                                    block_data["block_title"] = title_elem.text.strip()
                                    title_found = True
                                    break
                                except:
                                    continue
                    except:
                        pass
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –∏—â–µ–º –≤ —Å–∞–º–æ–º –±–ª–æ–∫–µ
                    if not title_found:
                        title_selectors = [
                            "h1", "h2", "h3", "h4", "h5",
                            ".section_title",
                            "span.font_md",
                            ".title",
                            ".item_name"
                        ]
                        for selector in title_selectors:
                            try:
                                title_elem = block.find_element(By.CSS_SELECTOR, selector)
                                block_data["block_title"] = title_elem.text.strip()
                                title_found = True
                                break
                            except:
                                continue
                    
                    if not title_found:
                        block_data["block_title"] = f"–ë–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ {i + 1}"
                        
                except:
                    block_data["block_title"] = f"–ë–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ {i + 1}"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ (–∏—â–µ–º fancy popup_link href –≤ section_img)
                try:
                    image_found = False
                    
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –±–ª–æ–∫–µ (–≤–Ω—É—Ç—Ä–∏ section_img)
                    try:
                        # –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å –∫–ª–∞—Å—Å–æ–º fancy popup_link –≤–Ω—É—Ç—Ä–∏ section_img
                        image_link = block.find_element(By.CSS_SELECTOR, "div.section_img a.fancy.popup_link")
                        image_url = image_link.get_attribute('href')
                        if image_url:
                            if not image_url.startswith('http'):
                                if image_url.startswith('//'):
                                    image_url = 'https:' + image_url
                                elif image_url.startswith('/'):
                                    image_url = 'https://cnc1.ru' + image_url
                            block_data["block_image"] = image_url
                            image_found = True
                            print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {image_url}")
                    except:
                        pass
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
                    if not image_found:
                        link_selectors = [
                            ".section_img a.fancy.popup_link",
                            ".section_img a[href*='.jpg']",
                            ".section_img a[href*='.png']",
                            ".section_img a[href*='.gif']",
                            "a.fancy.popup_link"
                        ]
                        for selector in link_selectors:
                            try:
                                image_link = block.find_element(By.CSS_SELECTOR, selector)
                                image_url = image_link.get_attribute('href')
                                if image_url:
                                    if not image_url.startswith('http'):
                                        if image_url.startswith('//'):
                                            image_url = 'https:' + image_url
                                        elif image_url.startswith('/'):
                                            image_url = 'https://cnc1.ru' + image_url
                                    block_data["block_image"] = image_url
                                    image_found = True
                                    print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {image_url}")
                                    break
                            except:
                                continue
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å –æ–±—ã—á–Ω—ã–µ img —Ç–µ–≥–∏ –∫–∞–∫ fallback
                    if not image_found:
                        image_selectors = [
                            "div.section_img img",
                            ".section_img img",
                            "img"
                        ]
                        for selector in image_selectors:
                            try:
                                image_elem = block.find_element(By.CSS_SELECTOR, selector)
                                image_url = image_elem.get_attribute('src')
                                if image_url and not image_url.startswith('http'):
                                    if image_url.startswith('//'):
                                        image_url = 'https:' + image_url
                                    elif image_url.startswith('/'):
                                        image_url = 'https://cnc1.ru' + image_url
                                block_data["block_image"] = image_url
                                image_found = True
                                print(f"   ‚Üí –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ (img): {image_url}")
                                break
                            except:
                                continue
                    
                    if not image_found:
                        print(f"   ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    print(f"   ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞: {e}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                try:
                    table_elem = block.find_element(By.CSS_SELECTOR, "table")
                    header_cells = table_elem.find_elements(By.CSS_SELECTOR, "th")
                    
                    for cell in header_cells:
                        header_text = driver.execute_script("return arguments[0].textContent;", cell).strip()
                        if header_text and header_text not in block_data["table_headers"]:
                            block_data["table_headers"].append(header_text)
                except:
                    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    block_data["table_headers"] = ["–ê—Ä—Ç–∏–∫—É–ª", "–°–∏—Å—Ç–µ–º–∞ –ß–ü–£", "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "–¶–µ–Ω–∞"]
                
                # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
                try:
                    rows = block.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
                    
                    for row in rows:
                        try:
                            # –ê—Ä—Ç–∏–∫—É–ª –∏ —Å—Å—ã–ª–∫–∞
                            try:
                                article_link = row.find_element(By.CSS_SELECTOR, "a.dark_link.js-notice-block__title")
                                article = article_link.find_element(By.TAG_NAME, "span").text.strip()
                                url = article_link.get_attribute('href')
                            except:
                                article = "–ù–µ —É–∫–∞–∑–∞–Ω"
                                url = None

                            # –ù–∞–∑–≤–∞–Ω–∏–µ
                            try:
                                name_elem = row.find_element(By.CSS_SELECTOR, "span.font_md")
                                name = name_elem.text.strip()
                            except:
                                name = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞)
                            props = {}
                            props_cells = row.find_elements(By.CSS_SELECTOR, "td.table-view__item-wrapper-prop")
                            for j, cell in enumerate(props_cells):
                                cell_text = cell.text.strip()
                                if j < len(block_data["table_headers"]) - 2:
                                    header_name = block_data["table_headers"][j + 2] if j + 2 < len(block_data["table_headers"]) else f"param_{j+1}"
                                    props[header_name] = cell_text
                                else:
                                    props[f"param_{j+1}"] = cell_text

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
                            product_data = {
                                "name": name,
                                "url": url,
                                "article": article,
                                **props
                            }
                            block_data["products"].append(product_data)

                        except Exception as e:
                            print(f" ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä –≤ –±–ª–æ–∫–µ {i+1}: {e}")
                            continue
                            
                except:
                    print(f" ‚Üí –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤ –±–ª–æ–∫–µ {i+1}")
                
                if block_data["products"] or block_data["block_title"]:
                    product_blocks.append(block_data)
                    print(f" ‚Üí –ë–ª–æ–∫ {i+1}: '{block_data['block_title']}' - {len(block_data['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ
                    if block_data.get("block_image"):
                        print(f"   ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {block_data['block_image']}")
                    else:
                        print(f"   ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    if block_data.get("table_headers"):
                        headers_str = ", ".join(block_data["table_headers"][:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                        if len(block_data["table_headers"]) > 5:
                            headers_str += f" –∏ –µ—â—ë {len(block_data['table_headers']) - 5}"
                        print(f"   ‚îú‚îÄ‚îÄ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ({len(block_data['table_headers'])}): {headers_str}")
                    else:
                        print(f"   ‚îú‚îÄ‚îÄ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
                    if block_data["products"]:
                        print(f"   ‚îî‚îÄ‚îÄ –¢–æ–≤–∞—Ä—ã:")
                        for j, product in enumerate(block_data["products"][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                            article = product.get("article", "‚Äî")
                            name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                            print(f"       {j+1}. {name} (–∞—Ä—Ç: {article})")
                        if len(block_data["products"]) > 3:
                            print(f"       ... –∏ –µ—â—ë {len(block_data['products']) - 3} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        print(f"   ‚îî‚îÄ‚îÄ –¢–æ–≤–∞—Ä—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            except Exception as e:
                print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞ {i+1}: {e}")
                continue
    
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return parse_table_products()
    
    if not product_blocks:
        print(" ‚Üí –ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥")
        return parse_table_products()
    
    return {
        "structured_blocks": True,
        "blocks": product_blocks
    }

def parse_table_products():
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
    –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫' ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Ç—É–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    """
    products = []

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"
    try:
        full_list_link = driver.find_element(By.CSS_SELECTOR, "div.module-pagination a.link")
        href = full_list_link.get_attribute("href")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫: {href}")
        driver.get(href)
        time.sleep(1.5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏
    except:
        print(" ‚Üí –°—Å—ã–ª–∫–∞ '–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

    # –®–∞–≥ 1.5: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    table_headers = get_table_headers()

    # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ ‚Äî —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Ç–µ–∫—É—â–µ–π)
    try:
        rows = driver.find_elements(By.CSS_SELECTOR, "tr.main_item_wrapper")
        print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏: {len(rows)}")
    except Exception as e:
        print(f" ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        rows = []

    for row in rows:
        try:
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            image_url = None
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                image_selectors = [
                    "div.section_img img",
                    ".section_img img", 
                    "img.preview_picture",
                    ".preview_picture",
                    "td img",
                    "img"
                ]
                
                image_elem = None
                for selector in image_selectors:
                    try:
                        image_elem = row.find_element(By.CSS_SELECTOR, selector)
                        if image_elem:
                            break
                    except:
                        continue
                
                if image_elem:
                    image_url = image_elem.get_attribute('src')
                    # –ï—Å–ª–∏ src –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
                    if image_url and not image_url.startswith('http'):
                        if image_url.startswith('//'):
                            image_url = 'https:' + image_url
                        elif image_url.startswith('/'):
                            image_url = 'https://cnc1.ru' + image_url
                else:
                    print("   ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                print(f"   ‚Üí –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

            # –ê—Ä—Ç–∏–∫—É–ª –∏ —Å—Å—ã–ª–∫–∞
            try:
                article_link = row.find_element(By.CSS_SELECTOR, "a.dark_link.js-notice-block__title")
                article = article_link.find_element(By.TAG_NAME, "span").text.strip()
                url = article_link.get_attribute('href')
            except:
                article = "–ù–µ —É–∫–∞–∑–∞–Ω"
                url = None

            # –ù–∞–∑–≤–∞–Ω–∏–µ
            try:
                name_elem = row.find_element(By.CSS_SELECTOR, "span.font_md")
                name = name_elem.text.strip()
            except:
                name = "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü—ã)
            props = {}
            props_cells = row.find_elements(By.CSS_SELECTOR, "td.table-view__item-wrapper-prop")
            for i, cell in enumerate(props_cells):
                cell_text = cell.text.strip()
                if i < len(table_headers) - 2:  # -2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–µ 2 –∫–æ–ª–æ–Ω–∫–∏ —ç—Ç–æ –∞—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    header_name = table_headers[i + 2] if i + 2 < len(table_headers) else f"param_{i+1}"
                    props[header_name] = cell_text
                else:
                    props[f"param_{i+1}"] = cell_text

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            product_data = {
                "name": name,
                "url": url,
                "article": article,
                "image_url": image_url,
                **props
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            print(f"     ‚Üí –¢–æ–≤–∞—Ä: {name}")
            if image_url:
                print(f"       ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ")
            else:
                print(f"       ‚îú‚îÄ‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå")
            if article and article != "–ù–µ —É–∫–∞–∑–∞–Ω":
                print(f"       ‚îú‚îÄ‚îÄ –ê—Ä—Ç–∏–∫—É–ª: {article}")
            if url:
                print(f"       ‚îî‚îÄ‚îÄ –°—Å—ã–ª–∫–∞: ‚úÖ")
                
            products.append(product_data)

        except Exception as e:
            print(f" ‚Üí –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä: {e}")
            continue

    print(f" ‚Üí –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    return {
        "table_headers": table_headers,
        "products": products
    }

def parse_grandchildren():
    """
    –ü–∞—Ä—Å–∏—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–Ω—É–∫–∏), –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.
    –ò—â–µ—Ç ul.dropdown –∏ —Å–æ–±–∏—Ä–∞–µ—Ç a.section.option-font-bold
    """
    try:

        links = driver.find_elements(By.CSS_SELECTOR, 'a.item_block_href')

        grandchildren = []
        for link in links:
            title_elem = link.find_element(By.CSS_SELECTOR, 'span.font_md')
            product_name = title_elem.text.strip()
            product_url = link.get_attribute('href')

            if product_name and product_url:
                grandchildren.append({
                    "name": product_name,
                    "url": product_url
                })

        print(f" –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(grandchildren)}")
        return grandchildren

    except Exception as e:
        print(f" –ù–µ—Ç –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        return []

def parse_sub_subcategories():
    """
    –ü–∞—Ä—Å–∏—Ç –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (4-–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
    –ò—â–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ catalog_section_list count_section_list_6 row items margin0 flexbox type_sections_4
    """
    try:
        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        section_selectors = [
            ".catalog_section_list.count_section_list_6.row.items.margin0.flexbox.type_sections_4 a",
            ".catalog_section_list a.item_block_href",
            ".count_section_list_6 a",
            ".type_sections_4 a.item_block_href",
            ".catalog_section_list a"
        ]
        
        sub_subcategories = []
        
        for selector in section_selectors:
            try:
                links = driver.find_elements(By.CSS_SELECTOR, selector)
                if links:
                    print(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                    
                    for link in links:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                            name = None
                            name_selectors = [
                                "span.font_md",
                                ".section_name",
                                "span",
                                ".name"
                            ]
                            
                            for name_sel in name_selectors:
                                try:
                                    name_elem = link.find_element(By.CSS_SELECTOR, name_sel)
                                    name = name_elem.text.strip()
                                    if name:
                                        break
                                except:
                                    continue
                            
                            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                            if not name:
                                name = link.text.strip()
                            
                            url = link.get_attribute('href')
                            
                            if name and url and '/catalog/' in url:
                                sub_subcategories.append({
                                    "name": name,
                                    "url": url
                                })
                                
                        except Exception as e:
                            continue
                    
                    if sub_subcategories:
                        break
                        
            except Exception as e:
                continue
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_subs = []
        seen_urls = set()
        for sub in sub_subcategories:
            if sub['url'] not in seen_urls:
                unique_subs.append(sub)
                seen_urls.add(sub['url'])
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(unique_subs)}")
        return unique_subs

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

# === –í–≤–æ–¥ –∏ –∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞ ===
print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
print("1. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Excel üìä")
print("2. –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ (structured_products)")
print("3. –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (custom_list)")
print("4. –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (product-detail) üÜï")
print("5. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π üîó")
print("6. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è Excel üîß")
print("7. –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ üìä")
print("8. –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üß™")

mode_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-8) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ").strip()

chrome_options = Options()
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-plugins")

if mode_choice == "2":
    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ structured_products (—Ç–∞–±–ª–∏—Ü—ã)
    driver = webdriver.Chrome(options=chrome_options)
    test_url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç–∞–±–ª–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤: ")
    print(f"\n‚Üí –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {test_url}")
    driver.get(test_url)
    time.sleep(2)

    # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º parse_structured_products
    result = parse_structured_products()
    if isinstance(result, dict) and "structured_blocks" in result:
        blocks = result["blocks"]
        total_products = sum(len(block.get("products", [])) for block in blocks)
        print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: –Ω–∞–π–¥–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ —Å {total_products} —Ç–æ–≤–∞—Ä–∞–º–∏")
        for i, block in enumerate(blocks):
            block_products = block.get("products", [])
            print(f"\n–ë–ª–æ–∫ {i+1}: {block['block_title']} ({len(block_products)} —Ç–æ–≤–∞—Ä–æ–≤)")
            if block.get("block_image"):
                print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {block['block_image']}")
            if block.get("table_headers"):
                print(f"  –ó–∞–≥–æ–ª–æ–≤–∫–∏: {block['table_headers']}")
            for prod in block_products[:3]:
                print(f"  ‚Ä¢ {prod['name']} (–∞—Ä—Ç–∏–∫—É–ª: {prod.get('article', '‚Äî')})")
            if len(block_products) > 3:
                print(f"  ... –∏ –µ—â—ë {len(block_products) - 3}")
    elif isinstance(result, dict) and "products" in result:
        products = result["products"]
        headers = result.get("table_headers", [])
        print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: –Ω–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {headers}")
        for prod in products[:5]:
            print(f" ‚Ä¢ {prod['name']} (–∞—Ä—Ç–∏–∫—É–ª: {prod.get('article', '‚Äî')}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prod.get('image_url', '–Ω–µ—Ç')})")
    else:
        print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê: –Ω–∞–π–¥–µ–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
        for prod in result[:5]:
            print(f" ‚Ä¢ {prod['name']} (–∞—Ä—Ç–∏–∫—É–ª: {prod.get('article', '‚Äî')})")

elif mode_choice == "3":
    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ custom_list (—Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤)
    driver = webdriver.Chrome(options=chrome_options)
    test_url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (custom_list): ")
    print(f"\n‚Üí –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {test_url}")
    driver.get(test_url)
    time.sleep(2)

    # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º parse_custom_list
    result = parse_custom_list()
    print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê CUSTOM_LIST: –Ω–∞–π–¥–µ–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    for i, product in enumerate(result):
        print(f"\n=== –¢–æ–≤–∞—Ä {i+1} ===")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
        print(f"–°—Å—ã–ª–∫–∞: {product.get('url', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}")
        
        if product.get('image_url'):
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product['image_url']}")
        else:
            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        if product.get('price'):
            print(f"–¶–µ–Ω–∞: {product['price']}")
        elif product.get('preorder_price'):
            print(f"–ü—Ä–µ–¥–∑–∞–∫–∞–∑–Ω–∞—è —Ü–µ–Ω–∞: {product['preorder_price']}")
        else:
            print("–¶–µ–Ω–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

elif mode_choice == "4":
    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    driver = webdriver.Chrome(options=chrome_options)
    test_url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
    print(f"\nüß™ –¢–ï–°–¢ –°–¢–†–ê–ù–ò–¶–´ –¢–û–í–ê–†–ê")
    print(f"‚Üí –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {test_url}")
    driver.get(test_url)
    time.sleep(3)

    # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º parse_single_product_page
    result = parse_single_product_page()
    
    if result:
        product = result[0]
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –°–¢–†–ê–ù–ò–¶–´ –¢–û–í–ê–†–ê:")
        print(f"‚îÄ" * 50)
        print(f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
        print(f"üîó URL: {product['url']}")
        
        if product.get('image_url'):
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ {product['image_url']}")
        else:
            print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        if product.get('price'):
            print(f"üí∞ –¶–µ–Ω–∞: ‚úÖ {product['price']}")
        elif product.get('preorder_price'):
            print(f"üìã –ü—Ä–µ–¥–∑–∞–∫–∞–∑–Ω–∞—è —Ü–µ–Ω–∞: ‚úÖ {product['preorder_price']}")
        else:
            print(f"üí∞ –¶–µ–Ω–∞: ‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        if product.get('characteristics'):
            print(f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–∞–π–¥–µ–Ω–æ {len(product['characteristics'])}")
            for key, value in list(product['characteristics'].items())[:5]:
                print(f"   ‚Ä¢ {key}: {value}")
        else:
            print(f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞")

elif mode_choice == "5":
    # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    driver = webdriver.Chrome(options=chrome_options)
    test_url = input("–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: ")
    print(f"\nüß™ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –ü–û–î-–ü–û–î-–ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ô")
    print(f"‚Üí –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {test_url}")
    driver.get(test_url)
    time.sleep(3)

    # –ü—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–µ–º parse_sub_subcategories
    result = parse_sub_subcategories()
    
    if result:
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –ü–û–î-–ü–û–î-–ü–û–î–ö–ê–¢–ï–ì–û–†–ò–ô:")
        print(f"‚îÄ" * 60)
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ: {len(result)} –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        for i, sub_sub in enumerate(result):
            print(f"\nüìÇ {i+1}. {sub_sub['name']}")
            print(f"   üîó URL: {sub_sub['url']}")
            
        print(f"\nüéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–π:")
        choice = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö? (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä 1-{} –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ".format(len(result))).strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(result):
            selected = result[int(choice) - 1]
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑: {selected['name']}")
            driver.get(selected['url'])
            time.sleep(3)
            
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã
            products_result = parse_structured_products()
            
            if isinstance(products_result, dict) and "structured_blocks" in products_result:
                blocks = products_result["blocks"]
                total_products = sum(len(block.get("products", [])) for block in blocks)
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ —Å {total_products} —Ç–æ–≤–∞—Ä–∞–º–∏")
                
                for i, block in enumerate(blocks[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–ª–æ–∫–∞
                    block_products = block.get("products", [])
                    print(f"   –ë–ª–æ–∫ {i+1}: {block['block_title']} ({len(block_products)} —Ç–æ–≤–∞—Ä–æ–≤)")
                    
            elif isinstance(products_result, dict) and "products" in products_result:
                products = products_result["products"]
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                for prod in products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    print(f"   ‚Ä¢ {prod['name']}")
                    
            else:
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products_result)} —Ç–æ–≤–∞—Ä–æ–≤")
                for prod in products_result[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    print(f"   ‚Ä¢ {prod['name']}")
    else:
        print("\n‚ùå –ü–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print("   ‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ CSS")
        print("   ‚Ä¢ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

elif mode_choice == "6":
    # –†–µ–∂–∏–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤
    fix_existing_csv_files()
    create_excel_compatible_csv() # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    exit()

elif mode_choice == "7":
    # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Excel –∏–∑ CSV
    print("\nüìä –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–û–ì–û EXCEL –§–ê–ô–õ–ê")
    
    if not os.path.exists("results"):
        print("‚ùå –ü–∞–ø–∫–∞ 'results' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        exit()
    
    csv_files = [f for f in os.listdir("results") if f.endswith('.csv')]
    if not csv_files:
        print("‚ùå CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results'")
        exit()
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª–æ–≤")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
    for filename in csv_files:
        try:
            filepath = os.path.join("results", filename)
            df = pd.read_csv(filepath, delimiter=';', encoding='utf-8-sig')
            
            for _, row in df.iterrows():
                excel_data_collector["all_products"].append(row.to_dict())
                
            print(f"   ‚úì –ó–∞–≥—Ä—É–∂–µ–Ω: {filename} ({len(df)} —Å—Ç—Ä–æ–∫)")
            
        except Exception as e:
            print(f"   ‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel
    excel_file = save_consolidated_excel()
    
    if excel_file:
        print(f"\nüéâ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(excel_file)}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
    
    exit()

elif mode_choice == "8":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    driver = webdriver.Chrome(options=chrome_options)
    url = input("–í–≤–µ–¥–∏—Ç–µ URL –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")
    driver.get(url)
    time.sleep(2)

    print("\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò")
    print("="*60)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_categories = driver.find_elements(By.CSS_SELECTOR, 'a.icons_fa.parent.rounded2.bordered')
    print(f'üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(main_categories)}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories_list = []
    for i, main_cat in enumerate(main_categories):
        try:
            cat_name = get_category_name(main_cat)
            categories_list.append((cat_name, main_cat))
            print(f"{i+1}. {cat_name}")
        except Exception as e:
            print(f"{i+1}. –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(categories_list)}): ").strip()
        category_index = int(choice) - 1
        
        if 0 <= category_index < len(categories_list):
            selected_category_name, selected_category_element = categories_list[category_index]
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = get_subcategories(selected_category_element)
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcategories)}")
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
            clear_category_collector()
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            parsing_state["start_time"] = datetime.now()
            
            for sub_index, sub in enumerate(subcategories):
                try:
                    sub_name = sub["name"]
                    sub_url = sub["url"]
                    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {sub_name} ({sub_index + 1}/{len(subcategories)})")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    if not safe_get_page(sub_url):
                        print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sub_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                        continue
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    items = safe_parse_with_retry(get_products, f"{selected_category_name} -> {sub_name}")
                    
                    if isinstance(items, dict) and "structured_blocks" in items:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
                        for block in items["blocks"]:
                            block_info = {
                                "block_title": block.get("block_title", ""),
                                "block_image": block.get("block_image", ""),
                                "table_headers": block.get("table_headers", [])
                            }
                            add_to_category_collector(
                                selected_category_name, 
                                sub_name, 
                                block.get("products", []), 
                                block_info
                            )
                        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items['blocks'])} –±–ª–æ–∫–æ–≤")
                        
                    elif isinstance(items, dict) and "products" in items:
                        # –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                        add_to_category_collector(selected_category_name, sub_name, items["products"])
                        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items['products'])} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                    elif items and isinstance(items[0], dict) and "name" in items[0]:
                        if "article" not in items[0]:
                            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                            print(f"  üîó –ù–∞–π–¥–µ–Ω–æ {len(items)} –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                            for grand in items[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 3 –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                                try:
                                    print(f"    üîç –ü–∞—Ä—Å–∏–º –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {grand['name']}")
                                    
                                    if not safe_get_page(grand["url"]):
                                        continue
                                    
                                    grand_result = safe_parse_with_retry(
                                        parse_structured_products, 
                                        f"{selected_category_name} -> {sub_name} -> {grand['name']}"
                                    )
                                    
                                    if isinstance(grand_result, dict) and "structured_blocks" in grand_result:
                                        for block in grand_result["blocks"]:
                                            block_info = {
                                                "block_title": block.get("block_title", ""),
                                                "block_image": block.get("block_image", ""),
                                                "table_headers": block.get("table_headers", [])
                                            }
                                            add_to_category_collector(
                                                selected_category_name, 
                                                [sub_name, grand['name']], 
                                                block.get("products", []), 
                                                block_info
                                            )
                                        print(f"    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(grand_result['blocks'])} –±–ª–æ–∫–æ–≤")
                                        
                                except Exception as e:
                                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {grand['name']}: {e}")
                        else:
                            # –≠—Ç–æ —Ç–æ–≤–∞—Ä—ã custom_list
                            add_to_category_collector(selected_category_name, sub_name, items)
                            print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤ (custom_list)")
                    else:
                        print(f"  ‚ö†Ô∏è –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {sub_name}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û EXCEL –§–ê–ô–õ–ê")
            print("="*50)
            
            excel_file = save_category_based_excel()
            
            if excel_file:
                print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(excel_file)}")
                print(f"üìÅ –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: results/")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if selected_category_name in category_data_collector:
                    stats = category_data_collector[selected_category_name]["statistics"]
                    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò '{selected_category_name}':")
                    print(f"   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}")
                    print(f"   üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['total_subcategories']}")
                    print(f"   üóÇÔ∏è –ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_blocks']}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    exit()

else:
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
    driver = webdriver.Chrome(options=chrome_options)
    url = input("–í–≤–µ–¥–∏—Ç–µ URL –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")
    driver.get(url)
    time.sleep(2)

    # === –®–∞–≥ 1: –°–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π ===
    main_categories = driver.find_elements(By.CSS_SELECTOR, 'a.icons_fa.parent.rounded2.bordered')
    print(f'–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(main_categories)}')

    categories_data = []

    for main_cat in main_categories:
        try:
            cat_name = get_category_name(main_cat)
            subcategories = get_subcategories(main_cat)
            
            categories_data.append({
                "name": cat_name,
                "subcategories": subcategories
            })
            print(f" –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {cat_name} ‚Üí {len(subcategories)} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

    # === –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥ –∏ —Å–±–æ—Ä "–≤–Ω—É–∫–æ–≤" –∏ —Ç–æ–≤–∞—Ä–æ–≤ ===
    parsing_state["start_time"] = datetime.now()
    parsing_state["total_categories"] = len(categories_data)
    
    for cat_index, cat_data in enumerate(categories_data):
        cat_name = cat_data["name"]
        print(f"\nüè∑Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_name} ({cat_index + 1}/{len(categories_data)})")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∫–∞–∂–¥—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é
        if cat_index > 0 and cat_index % 5 == 0:
            print(f"üîÑ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ {cat_index} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            restart_browser()
            time.sleep(3)
        
        for sub_index, sub in enumerate(cat_data["subcategories"]):
            try:
                sub_name = sub["name"]
                sub_url = sub["url"]
                print(f"  üîç –ü–µ—Ä–µ—Ö–æ–¥: {sub_name} ({sub_index + 1}/{len(cat_data['subcategories'])})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                update_parsing_progress(cat_index, sub_index, len(categories_data))
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if not safe_get_page(sub_url):
                    print(f"  ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sub_name} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                items = safe_parse_with_retry(get_products, f"{cat_name} -> {sub_name}")
                
                sub["products"] = []
                sub["grandchildren"] = []
                sub["table_headers"] = []
                sub["product_blocks"] = []
                
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
                if isinstance(items, dict) and "structured_blocks" in items:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                    for block in items["blocks"]:
                        block_info = {
                            "block_title": block.get("block_title", ""),
                            "block_image": block.get("block_image", ""),
                            "table_headers": block.get("table_headers", [])
                        }
                        add_to_category_collector(cat_name, sub_name, block.get("products", []), block_info)
                    
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    add_to_excel_collector(items["blocks"], cat_name, sub_name, "structured_blocks")
                    sub["product_blocks"] = items["blocks"]
                    all_products = []
                    for block in items["blocks"]:
                        all_products.extend(block.get("products", []))
                    sub["products"] = all_products
                    
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
                elif isinstance(items, dict) and "products" in items:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                    add_to_category_collector(cat_name, sub_name, items["products"])
                    
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    add_to_excel_collector(items["products"], cat_name, sub_name, "regular_products")
                    sub["products"] = items["products"]
                    sub["table_headers"] = items.get("table_headers", [])
                elif items and isinstance(items[0], dict) and "name" in items[0] and "url" in items[0]:
                    if "article" not in items[0]:
                        sub["grandchildren"] = items

                        for grand_index, grand in enumerate(items):
                            try:
                                print(f"      üîç –ü–∞—Ä—Å–∏–º –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {grand['name']} ({grand_index + 1}/{len(items)})")
                                
                                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                if not safe_get_page(grand["url"]):
                                    print(f"      ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {grand['name']} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                                    continue
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                sub_subcategories = safe_parse_with_retry(
                                    parse_sub_subcategories, 
                                    f"–ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {grand['name']}"
                                )
                                
                                if sub_subcategories:
                                    print(f"        üîó –ù–∞–π–¥–µ–Ω–æ {len(sub_subcategories)} –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                                    grand["sub_subcategories"] = sub_subcategories
                                    
                                    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                                    for sub_sub_index, sub_sub in enumerate(sub_subcategories):
                                        try:
                                            print(f"        üîç –ü–∞—Ä—Å–∏–º –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {sub_sub['name']} ({sub_sub_index + 1}/{len(sub_subcategories)})")
                                            
                                            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                            if not safe_get_page(sub_sub["url"]):
                                                print(f"        ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sub_sub['name']} - –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                                                continue
                                            
                                            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                            sub_sub_result = safe_parse_with_retry(
                                                parse_structured_products, 
                                                f"{cat_name} -> {sub_name} -> {grand['name']} -> {sub_sub['name']}"
                                            )
                                            
                                            if isinstance(sub_sub_result, dict) and "structured_blocks" in sub_sub_result:
                                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                                                for block in sub_sub_result["blocks"]:
                                                    block_info = {
                                                        "block_title": block.get("block_title", ""),
                                                        "block_image": block.get("block_image", ""),
                                                        "table_headers": block.get("table_headers", [])
                                                    }
                                                    add_to_category_collector(cat_name, [sub_name, grand['name'], sub_sub['name']], block.get("products", []), block_info)
                                                
                                                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                                add_to_excel_collector(sub_sub_result["blocks"], cat_name, f"{sub_name}_{grand['name']}_{sub_sub['name']}", "structured_blocks")
                                                sub_sub["product_blocks"] = sub_sub_result["blocks"]
                                                all_products = []
                                                for block in sub_sub_result["blocks"]:
                                                    all_products.extend(block.get("products", []))
                                                sub_sub["products"] = all_products
                                                
                                            elif isinstance(sub_sub_result, dict) and "products" in sub_sub_result:
                                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                                                add_to_category_collector(cat_name, [sub_name, grand['name'], sub_sub['name']], sub_sub_result["products"])
                                                
                                                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                                add_to_excel_collector(sub_sub_result["products"], cat_name, f"{sub_name}_{grand['name']}_{sub_sub['name']}", "regular_products")
                                                sub_sub["products"] = sub_sub_result["products"]
                                                sub_sub["table_headers"] = sub_sub_result.get("table_headers", [])
                                            else:
                                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
                                                if sub_sub_result:
                                                    add_to_category_collector(cat_name, [sub_name, grand['name'], sub_sub['name']], sub_sub_result)
                                                    add_to_excel_collector(sub_sub_result, cat_name, f"{sub_name}_{grand['name']}_{sub_sub['name']}", "regular_products")
                                                
                                                sub_sub["products"] = sub_sub_result or []
                                                sub_sub["table_headers"] = []
                                                
                                        except Exception as e:
                                            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {sub_sub['name']}: {e}")
                                            sub_sub["products"] = []
                                            sub_sub["table_headers"] = []
                                    
                                    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–µ –ø–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                    grand["products"] = []
                                    grand["table_headers"] = []
                                    continue
                                
                                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥-–ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–∞—Ä—Å–∏–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                                grand_result = safe_parse_with_retry(
                                    parse_structured_products, 
                                    f"{cat_name} -> {sub_name} -> {grand['name']}"
                                )
                                
                                print(f"        üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: —Ç–∏–ø={type(grand_result)}, –∫–ª—é—á–∏={list(grand_result.keys()) if isinstance(grand_result, dict) else '–Ω–µ —Å–ª–æ–≤–∞—Ä—å'}")
                                
                                if isinstance(grand_result, dict) and "structured_blocks" in grand_result:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                                    blocks = grand_result["blocks"]
                                    for block in blocks:
                                        block_info = {
                                            "block_title": block.get("block_title", ""),
                                            "block_image": block.get("block_image", ""),
                                            "table_headers": block.get("table_headers", [])
                                        }
                                        add_to_category_collector(cat_name, [sub_name, grand['name']], block.get("products", []), block_info)
                                    
                                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                    add_to_excel_collector(blocks, cat_name, f"{sub_name}_{grand['name']}", "structured_blocks")
                                    grand["product_blocks"] = blocks
                                    all_products = []
                                    for block in blocks:
                                        all_products.extend(block.get("products", []))
                                    grand["products"] = all_products
                                    print(f"        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ structured_blocks: {len(blocks)} –±–ª–æ–∫–æ–≤, {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
                                elif isinstance(grand_result, dict) and "products" in grand_result:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
                                    products = grand_result["products"]
                                    add_to_category_collector(cat_name, [sub_name, grand['name']], products)
                                    
                                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                                    add_to_excel_collector(products, cat_name, f"{sub_name}_{grand['name']}", "regular_products")
                                    grand["products"] = products
                                    grand["table_headers"] = grand_result.get("table_headers", [])
                                    print(f"        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ products: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                                else:
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤)
                                    if grand_result:
                                        add_to_category_collector(cat_name, [sub_name, grand['name']], grand_result)
                                        add_to_excel_collector(grand_result, cat_name, f"{sub_name}_{grand['name']}", "regular_products")
                                        print(f"        ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Å–ø–∏—Å–æ–∫: {len(grand_result) if isinstance(grand_result, list) else '–Ω–µ —Å–ø–∏—Å–æ–∫'} —Ç–æ–≤–∞—Ä–æ–≤")
                                    else:
                                        print(f"        ‚ùå –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                                    
                                    grand["products"] = grand_result or []
                                    grand["table_headers"] = []
                                    
                            except Exception as e:
                                print(f"      –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {grand['name']}: {e}")
                                grand["products"] = []
                                grand["table_headers"] = []

                    else:
                        # –≠—Ç–æ —Ç–æ–≤–∞—Ä—ã custom_list
                        add_to_category_collector(cat_name, sub_name, items)
                        add_to_excel_collector(items, cat_name, sub_name, "custom_list")
                        sub["products"] = items
                else:
                    sub["products"] = []

            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {sub_name}: {e}")
                sub["products"] = []

    # === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢: –ò–µ—Ä–∞—Ä—Ö–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏")
    print("="*60)

    for item in categories_data:
        print(f" –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['name']}")
        for sub in item["subcategories"]:
            grandchildren = sub.get("grandchildren", [])
            products = sub.get("products", [])
            table_headers = sub.get("table_headers", [])
            product_blocks = sub.get("product_blocks", [])

            if grandchildren:
                print(f"  ‚îú‚îÄ‚îÄ {sub['name']} ‚Üí {len(grandchildren)} –ø–æ–¥-–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                for grand in grandchildren:
                    grand_products = grand.get("products", [])
                    grand_headers = grand.get("table_headers", [])
                    grand_blocks = grand.get("product_blocks", [])
                    
                    if grand_blocks:
                        print(f"  ‚îÇ    ‚îú‚îÄ‚îÄ {grand['name']} ‚Üí {len(grand_blocks)} –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
                        for block in grand_blocks:
                            block_products = block.get("products", [])
                            print(f"  ‚îÇ    ‚îÇ    ‚îú‚îÄ‚îÄ {block['block_title']} ({len(block_products)} —Ç–æ–≤–∞—Ä–æ–≤)")
                            if block.get("block_image"):
                                print(f"  ‚îÇ    ‚îÇ    ‚îÇ    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {block['block_image']}")
                            if block.get("table_headers"):
                                print(f"  ‚îÇ    ‚îÇ    ‚îÇ    –ó–∞–≥–æ–ª–æ–≤–∫–∏: {block['table_headers']}")
                            for prod in block_products[:3]:
                                print(f"  ‚îÇ    ‚îÇ    ‚îÇ    ‚Ä¢ {prod['name']}")
                            if len(block_products) > 3:
                                print(f"  ‚îÇ    ‚îÇ    ‚îÇ    ... –∏ –µ—â—ë {len(block_products) - 3}")
                    else:
                        print(f"  ‚îÇ    ‚îú‚îÄ‚îÄ {grand['name']} ({len(grand_products)} —Ç–æ–≤–∞—Ä–æ–≤)")
                        if grand_headers:
                            print(f"  ‚îÇ    ‚îÇ      –ó–∞–≥–æ–ª–æ–≤–∫–∏: {grand_headers}")
                        for prod in grand_products[:3]:
                            image_info = f" [–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prod.get('image_url', '–Ω–µ—Ç')}]" if prod.get('image_url') else ""
                            print(f"  ‚îÇ    ‚îÇ      ‚Ä¢ {prod['name']}{image_info}")
                        if len(grand_products) > 3:
                            print(f"  ‚îÇ    ‚îÇ      ... –∏ –µ—â—ë {len(grand_products) - 3}")

            elif product_blocks:
                print(f"  ‚îú‚îÄ‚îÄ {sub['name']} ‚Üí {len(product_blocks)} –±–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤")
                for block in product_blocks:
                    block_products = block.get("products", [])
                    print(f"  ‚îÇ    ‚îú‚îÄ‚îÄ {block['block_title']} ({len(block_products)} —Ç–æ–≤–∞—Ä–æ–≤)")
                    if block.get("block_image"):
                        print(f"  ‚îÇ    ‚îÇ    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞: {block['block_image']}")
                    if block.get("table_headers"):
                        print(f"  ‚îÇ    ‚îÇ    –ó–∞–≥–æ–ª–æ–≤–∫–∏: {block['table_headers']}")
                    for prod in block_products[:3]:
                        print(f"  ‚îÇ    ‚îÇ    ‚Ä¢ {prod['name']}")
                    if len(block_products) > 3:
                        print(f"  ‚îÇ    ‚îÇ    ... –∏ –µ—â—ë {len(block_products) - 3}")
                        
            elif products:
                print(f"  ‚îú‚îÄ‚îÄ {sub['name']} ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)")
                if table_headers:
                    print(f"  ‚îÇ      –ó–∞–≥–æ–ª–æ–≤–∫–∏: {table_headers}")
                for prod in products[:3]:
                    image_info = f" [–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prod.get('image_url', '–Ω–µ—Ç')}]" if prod.get('image_url') else ""
                    print(f"  ‚îÇ      ‚Ä¢ {prod['name']}{image_info}")
                if len(products) > 3:
                    print(f"  ‚îÇ      ... –∏ –µ—â—ë {len(products) - 3}")
            else:
                print(f"  ‚îú‚îÄ‚îÄ {sub['name']} (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤)")
        print()

    # === –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
    print("\n" + "="*60)
    print("–ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê")
    print("="*60)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    save_progress_checkpoint()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    end_time = datetime.now()
    total_time = end_time - parsing_state["start_time"] if parsing_state["start_time"] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {total_time}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {parsing_state['processed_items']}")
    print(f"üì¶ –°–æ–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(excel_data_collector['all_products'])}")
    
    # === –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤ ===
    print("\n" + "="*60)
    print("–°–û–ó–î–ê–ù–ò–ï EXCEL –§–ê–ô–õ–û–í")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel —Ñ–∞–π–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_excel_file = save_category_based_excel()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    consolidated_excel_file = save_consolidated_excel()
    
    if category_excel_file or consolidated_excel_file:
        print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        if category_excel_file:
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {os.path.basename(category_excel_file)}")
        if consolidated_excel_file:
            print(f"üìä –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(consolidated_excel_file)}")
        print(f"üìÅ –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: results/")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category_data_collector:
            print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            total_products = 0
            total_blocks = 0
            for cat_name, cat_data in category_data_collector.items():
                stats = cat_data["statistics"]
                total_products += stats["total_products"]
                total_blocks += stats["total_blocks"]
                print(f"   üìÇ {cat_name}: {stats['total_products']} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {stats['total_blocks']} –±–ª–æ–∫–∞—Ö")
            print(f"   üéØ –ò–¢–û–ì–û: {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {total_blocks} –±–ª–æ–∫–∞—Ö –ø–æ {len(category_data_collector)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    else:
        print(f"\n‚ö†Ô∏è Excel —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 'results/'")
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ checkpoint —Ñ–∞–π–ª–∞—Ö")

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
driver.quit() 

def add_to_category_collector(category_name, subcategory_path, product_data, block_info=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    Args:
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_path: –ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
        product_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞/—Ç–æ–≤–∞—Ä–æ–≤
        block_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
    """
    global category_data_collector
    
    if category_name not in category_data_collector:
        category_data_collector[category_name] = {
            "products": [],
            "subcategories": {},
            "blocks": [],
            "statistics": {
                "total_products": 0,
                "total_subcategories": 0,
                "total_blocks": 0
            }
        }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫—É
    if isinstance(subcategory_path, list):
        subcategory_key = " ‚Üí ".join(subcategory_path)
    else:
        subcategory_key = str(subcategory_path)
    
    timestamp = datetime.now().isoformat()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (structured_blocks)
    if block_info and isinstance(product_data, list):
        block_data = {
            "block_title": block_info.get("block_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"),
            "block_image": block_info.get("block_image", ""),
            "table_headers": block_info.get("table_headers", []),
            "subcategory_path": subcategory_key,
            "timestamp": timestamp,
            "products": []
        }
        
        for product in product_data:
            enhanced_product = {
                "category": category_name,
                "subcategory_path": subcategory_key,
                "block_title": block_info.get("block_title", ""),
                "block_image": block_info.get("block_image", ""),
                "name": product.get("name", ""),
                "article": product.get("article", ""),
                "url": product.get("url", ""),
                "image_url": product.get("image_url", ""),
                "timestamp": timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            for key, value in product.items():
                if key not in ["name", "article", "url", "image_url"]:
                    enhanced_product[key] = value
            
            block_data["products"].append(enhanced_product)
            category_data_collector[category_name]["products"].append(enhanced_product)
        
        category_data_collector[category_name]["blocks"].append(block_data)
        category_data_collector[category_name]["statistics"]["total_blocks"] += 1
        
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    elif isinstance(product_data, list):
        for product in product_data:
            enhanced_product = {
                "category": category_name,
                "subcategory_path": subcategory_key,
                "block_title": "",
                "block_image": "",
                "name": product.get("name", ""),
                "article": product.get("article", ""),
                "url": product.get("url", ""),
                "image_url": product.get("image_url", ""),
                "price": product.get("price", ""),
                "timestamp": timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            for key, value in product.items():
                if key not in ["name", "article", "url", "image_url", "price"]:
                    enhanced_product[key] = value
                    
            category_data_collector[category_name]["products"].append(enhanced_product)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if subcategory_key not in category_data_collector[category_name]["subcategories"]:
        category_data_collector[category_name]["subcategories"][subcategory_key] = 0
        category_data_collector[category_name]["statistics"]["total_subcategories"] += 1
    
    products_count = len(product_data) if isinstance(product_data, list) else 1
    category_data_collector[category_name]["subcategories"][subcategory_key] += products_count
    category_data_collector[category_name]["statistics"]["total_products"] += products_count

def save_category_based_excel():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    global category_data_collector
    
    if not category_data_collector:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"parsed_data_by_categories_{timestamp}.xlsx"
        filepath = os.path.join("results", filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {filename}")
        print(f"   ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_data_collector)}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –∫–Ω–∏–≥—É
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
            summary_data = []
            total_products = 0
            total_blocks = 0
            
            for cat_name, cat_data in category_data_collector.items():
                stats = cat_data["statistics"]
                total_products += stats["total_products"]
                total_blocks += stats["total_blocks"]
                
                summary_data.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat_name,
                    "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_products"],
                    "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": stats["total_subcategories"],
                    "–ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_blocks"],
                    "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏": ", ".join(list(cat_data["subcategories"].keys())[:3]) + 
                                  (f" –∏ –µ—â—ë {len(cat_data['subcategories']) - 3}" if len(cat_data["subcategories"]) > 3 else "")
                })
            
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name="üìä –°–≤–æ–¥–∫–∞", index=False)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç ({len(summary_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat_name, cat_data in category_data_collector.items():
                if not cat_data["products"]:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                df = pd.DataFrame(cat_data["products"])
                
                # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –Ω–∞—á–∞–ª–µ
                basic_columns = ["name", "article", "url", "image_url", "subcategory_path", "block_title", "block_image"]
                other_columns = [col for col in df.columns if col not in basic_columns + ["category", "timestamp"]]
                ordered_columns = [col for col in basic_columns if col in df.columns] + other_columns
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ timestamp –≤ –∫–æ–Ω–µ—Ü
                if "category" in df.columns:
                    ordered_columns.append("category")
                if "timestamp" in df.columns:
                    ordered_columns.append("timestamp")
                
                df = df[ordered_columns]
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                column_mapping = {
                    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                    "article": "–ê—Ä—Ç–∏–∫—É–ª",
                    "url": "–°—Å—ã–ª–∫–∞",
                    "image_url": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    "subcategory_path": "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                    "block_title": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞",
                    "block_image": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞",
                    "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "timestamp": "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
                }
                
                df = df.rename(columns=column_mapping)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 31 —Å–∏–º–≤–æ–ª–æ–º)
                sheet_name = cat_name[:27] + "..." if len(cat_name) > 27 else cat_name
                
                # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                invalid_chars = ['\\', '/', '*', '[', ']', ':', '?']
                for char in invalid_chars:
                    sheet_name = sheet_name.replace(char, '_')
                
                df.to_excel(writer, sheet_name=sheet_name, index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '{sheet_name}' ({len(df)} —Ç–æ–≤–∞—Ä–æ–≤)")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –±–ª–æ–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            all_blocks = []
            for cat_name, cat_data in category_data_collector.items():
                for block in cat_data["blocks"]:
                    block_summary = {
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat_name,
                        "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": block["subcategory_path"],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞": block["block_title"],
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞": block["block_image"],
                        "–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã": ", ".join(block["table_headers"]),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤": len(block["products"]),
                        "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞": block["timestamp"]
                    }
                    all_blocks.append(block_summary)
            
            if all_blocks:
                blocks_df = pd.DataFrame(all_blocks)
                blocks_df.to_excel(writer, sheet_name="üóÇÔ∏è –ë–ª–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤", index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–ë–ª–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' ({len(all_blocks)} –±–ª–æ–∫–æ–≤)")
        
        print(f"üéâ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filepath) / 1024 / 1024:.2f} –ú–ë")
        print(f"üìä –ò—Ç–æ–≥–æ: {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {total_blocks} –±–ª–æ–∫–∞—Ö")
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None

def clear_category_collector():
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    global category_data_collector
    category_data_collector = {}

