from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import asyncio
import csv
import os
from datetime import datetime
import threading
from concurrent.futures import ThreadPoolExecutor
import queue
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font, PatternFill, Alignment

# === CSV –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ===

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
excel_data_collector = {
    "all_products": [],  # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    "categories_summary": [],  # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    "parsing_log": []  # –õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞
}

# –ù–æ–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
category_data_collector = {}

def clear_category_collector():
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    global category_data_collector
    category_data_collector = {}

def add_to_category_collector(category_name, subcategory_path, product_data, block_info=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    Args:
        category_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory_path: –ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
        product_data: –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞/—Ç–æ–≤–∞—Ä–æ–≤
        block_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã)
    """
    global category_data_collector
    
    if category_name not in category_data_collector:
        category_data_collector[category_name] = {
            "products": [],
            "subcategories": {},
            "blocks": [],
            "statistics": {
                "total_products": 0,
                "total_subcategories": 0,
                "total_blocks": 0
            }
        }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å—Ç—Ä–æ–∫—É
    if isinstance(subcategory_path, list):
        subcategory_key = " ‚Üí ".join(subcategory_path)
    else:
        subcategory_key = str(subcategory_path)
    
    timestamp = datetime.now().isoformat()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (structured_blocks)
    if block_info and isinstance(product_data, list):
        block_data = {
            "block_title": block_info.get("block_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫"),
            "block_image": block_info.get("block_image", ""),
            "table_headers": block_info.get("table_headers", []),
            "subcategory_path": subcategory_key,
            "timestamp": timestamp,
            "products": []
        }
        
        for product in product_data:
            enhanced_product = {
                "category": category_name,
                "subcategory_path": subcategory_key,
                "block_title": block_info.get("block_title", ""),
                "block_image": block_info.get("block_image", ""),
                "name": product.get("name", ""),
                "article": product.get("article", ""),
                "url": product.get("url", ""),
                "image_url": product.get("image_url", ""),
                "timestamp": timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            for key, value in product.items():
                if key not in ["name", "article", "url", "image_url"]:
                    enhanced_product[key] = value
            
            block_data["products"].append(enhanced_product)
            category_data_collector[category_name]["products"].append(enhanced_product)
        
        category_data_collector[category_name]["blocks"].append(block_data)
        category_data_collector[category_name]["statistics"]["total_blocks"] += 1
        
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    elif isinstance(product_data, list):
        for product in product_data:
            enhanced_product = {
                "category": category_name,
                "subcategory_path": subcategory_key,
                "block_title": "",
                "block_image": "",
                "name": product.get("name", ""),
                "article": product.get("article", ""),
                "url": product.get("url", ""),
                "image_url": product.get("image_url", ""),
                "price": product.get("price", ""),
                "timestamp": timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
            for key, value in product.items():
                if key not in ["name", "article", "url", "image_url", "price"]:
                    enhanced_product[key] = value
                    
            category_data_collector[category_name]["products"].append(enhanced_product)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if subcategory_key not in category_data_collector[category_name]["subcategories"]:
        category_data_collector[category_name]["subcategories"][subcategory_key] = 0
        category_data_collector[category_name]["statistics"]["total_subcategories"] += 1
    
    products_count = len(product_data) if isinstance(product_data, list) else 1
    category_data_collector[category_name]["subcategories"][subcategory_key] += products_count
    category_data_collector[category_name]["statistics"]["total_products"] += products_count

def save_category_based_excel():
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ª–∏—Å—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    global category_data_collector
    
    if not category_data_collector:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        return None
    
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"parsed_data_by_categories_{timestamp}.xlsx"
        filepath = os.path.join("results", filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("results", exist_ok=True)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {filename}")
        print(f"   ‚Üí –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(category_data_collector)}")
        
        # –°–æ–∑–¥–∞–µ–º Excel –∫–Ω–∏–≥—É
        with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç
            summary_data = []
            total_products = 0
            total_blocks = 0
            
            for cat_name, cat_data in category_data_collector.items():
                stats = cat_data["statistics"]
                total_products += stats["total_products"]
                total_blocks += stats["total_blocks"]
                
                summary_data.append({
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat_name,
                    "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_products"],
                    "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": stats["total_subcategories"],
                    "–ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤": stats["total_blocks"],
                    "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏": ", ".join(list(cat_data["subcategories"].keys())[:3]) + 
                                  (f" –∏ –µ—â—ë {len(cat_data['subcategories']) - 3}" if len(cat_data["subcategories"]) > 3 else "")
                })
            
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name="üìä –°–≤–æ–¥–∫–∞", index=False)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω —Å–≤–æ–¥–Ω—ã–π –ª–∏—Å—Ç ({len(summary_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cat_name, cat_data in category_data_collector.items():
                if not cat_data["products"]:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                df = pd.DataFrame(cat_data["products"])
                
                # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏: –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –Ω–∞—á–∞–ª–µ
                basic_columns = ["name", "article", "url", "image_url", "subcategory_path", "block_title", "block_image"]
                other_columns = [col for col in df.columns if col not in basic_columns + ["category", "timestamp"]]
                ordered_columns = [col for col in basic_columns if col in df.columns] + other_columns
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ timestamp –≤ –∫–æ–Ω–µ—Ü
                if "category" in df.columns:
                    ordered_columns.append("category")
                if "timestamp" in df.columns:
                    ordered_columns.append("timestamp")
                
                df = df[ordered_columns]
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                column_mapping = {
                    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                    "article": "–ê—Ä—Ç–∏–∫—É–ª",
                    "url": "–°—Å—ã–ª–∫–∞",
                    "image_url": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                    "subcategory_path": "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                    "block_title": "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞",
                    "block_image": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞",
                    "category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                    "timestamp": "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞"
                }
                
                df = df.rename(columns=column_mapping)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 31 —Å–∏–º–≤–æ–ª–æ–º)
                sheet_name = cat_name[:27] + "..." if len(cat_name) > 27 else cat_name
                
                # –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                invalid_chars = ['\\', '/', '*', '[', ']', ':', '?']
                for char in invalid_chars:
                    sheet_name = sheet_name.replace(char, '_')
                
                df.to_excel(writer, sheet_name=sheet_name, index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '{sheet_name}' ({len(df)} —Ç–æ–≤–∞—Ä–æ–≤)")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –±–ª–æ–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            all_blocks = []
            for cat_name, cat_data in category_data_collector.items():
                for block in cat_data["blocks"]:
                    block_summary = {
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat_name,
                        "–ü—É—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π": block["subcategory_path"],
                        "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞": block["block_title"],
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–∞": block["block_image"],
                        "–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã": ", ".join(block["table_headers"]),
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤": len(block["products"]),
                        "–í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞": block["timestamp"]
                    }
                    all_blocks.append(block_summary)
            
            if all_blocks:
                blocks_df = pd.DataFrame(all_blocks)
                blocks_df.to_excel(writer, sheet_name="üóÇÔ∏è –ë–ª–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤", index=False)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç '–ë–ª–æ–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' ({len(all_blocks)} –±–ª–æ–∫–æ–≤)")
        
        print(f"üéâ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filepath}")
        print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(filepath) / 1024 / 1024:.2f} –ú–ë")
        print(f"üìä –ò—Ç–æ–≥–æ: {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –≤ {total_blocks} –±–ª–æ–∫–∞—Ö")
        
        return filepath
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
parsing_state = {
    "current_category": 0,
    "current_subcategory": 0,
    "total_categories": 0,
    "processed_items": 0,
    "last_successful_url": "",
    "start_time": None
}

# === –†–ï–ñ–ò–ú–´ –ó–ê–ü–£–°–ö–ê ===
print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
print("8. –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üß™")

mode_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (8): ").strip()

chrome_options = Options()
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-plugins")

if mode_choice == "8":
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    driver = webdriver.Chrome(options=chrome_options)
    url = input("–í–≤–µ–¥–∏—Ç–µ URL –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")
    driver.get(url)
    time.sleep(2)

    print("\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ü–ê–†–°–ò–ù–ì –û–î–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò")
    print("="*60)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    main_categories = driver.find_elements(By.CSS_SELECTOR, 'a.icons_fa.parent.rounded2.bordered')
    print(f'üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(main_categories)}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories_list = []
    for i, main_cat in enumerate(main_categories):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            name_span = main_cat.find_element(By.CSS_SELECTOR, 'span.name')
            cat_name = driver.execute_script("return arguments[0].textContent;", name_span).strip()
            categories_list.append((cat_name, main_cat))
            print(f"{i+1}. {cat_name}")
        except Exception as e:
            print(f"{i+1}. –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (1-{len(categories_list)}): ").strip()
        category_index = int(choice) - 1
        
        if 0 <= category_index < len(categories_list):
            selected_category_name, selected_category_element = categories_list[category_index]
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                dropdown = selected_category_element.find_element(
                    By.XPATH,
                    "./following-sibling::ul[contains(@class, 'dropdown') and contains(@class, 'scrollblock')]"
                )
                links = dropdown.find_elements(By.CSS_SELECTOR, 'a.section.option-font-bold')
                
                subcategories = []
                for link in links:
                    href = link.get_attribute("href")
                    text = driver.execute_script("return arguments[0].textContent;", link).strip()
                    subcategories.append({"name": text, "url": href})
                    
            except Exception as e:
                print(f"–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                subcategories = []
                
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcategories)}")
            
            # –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
            clear_category_collector()
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            parsing_state["start_time"] = datetime.now()
            
            for sub_index, sub in enumerate(subcategories):
                try:
                    sub_name = sub["name"]
                    sub_url = sub["url"]
                    print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {sub_name} ({sub_index + 1}/{len(subcategories)})")
                    
                    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    print(f"   üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞: {sub_url}")
                    driver.get(sub_url)
                    time.sleep(3)
                    
                    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥ - –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º —Ç–æ–≤–∞—Ä—ã
                    print(f"   üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
                    
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    product_selectors = [
                        "div.list_item.item_info.catalog-adaptive",
                        "tr.main_item_wrapper",
                        "a.item_block_href"
                    ]
                    
                    found_products = []
                    for selector in product_selectors:
                        try:
                            elements = driver.find_elements(By.CSS_SELECTOR, selector)
                            if elements:
                                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                                for i, elem in enumerate(elements[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
                                    try:
                                        name = elem.text.strip()[:100] if elem.text.strip() else f"–¢–æ–≤–∞—Ä {i+1}"
                                        url = elem.get_attribute('href') if elem.tag_name == 'a' else ""
                                        
                                        product = {
                                            "name": name,
                                            "url": url,
                                            "article": f"TEST_{i+1}",
                                            "image_url": ""
                                        }
                                        found_products.append(product)
                                        print(f"     ‚Üí {name[:50]}...")
                                    except:
                                        continue
                                break
                        except:
                            continue
                    
                    if found_products:
                        add_to_category_collector(selected_category_name, sub_name, found_products)
                        print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(found_products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        print(f"  ‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {sub_name}: {e}")
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            print(f"\nüìä –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û EXCEL –§–ê–ô–õ–ê")
            print("="*50)
            
            excel_file = save_category_based_excel()
            
            if excel_file:
                print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {os.path.basename(excel_file)}")
                print(f"üìÅ –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ: results/")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if selected_category_name in category_data_collector:
                    stats = category_data_collector[selected_category_name]["statistics"]
                    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò '{selected_category_name}':")
                    print(f"   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}")
                    print(f"   üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['total_subcategories']}")
                    print(f"   üóÇÔ∏è –ë–ª–æ–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_blocks']}")
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
driver.quit() 